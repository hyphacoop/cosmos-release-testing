---

    name: Gaia Upgrade - Fresh State
    on:
      # repository_dispatch:
        # types: [new_main_build]
      workflow_dispatch:
        inputs:
          from_version:
            description: 'Gaia version to upgrade from'
            required: true
            type: string
            default: v25.0.0
          to_version:
            description: 'Gaia version to upgrade to'
            required: true
            default: v25.1.0
          upgrade_name:
            description: 'Name of the upgrade'
            required: false
            type: string
            default: v25.1.0
      push:
    
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    env:
      # All chain variables
      # Consumer chain variables
      RECIPIENT: cosmos1r5v5srda7xfth3hn2s26txvrcrntldjumt8mhl
      PSS_ENABLED: true
      PROVIDER_ICS: v6.4.0
      TOPN: 0
      ICS_TRANSFORM_BINARY_URL: https://github.com/hyphacoop/cosmos-builds/releases/download/ics-v3.3.0-transform/interchain-security-cd
      ICS_TRANSFORM_BINARY: cd-transform
      # Stride chain variables
      STRIDE_CHAIN_BINARY: strided
      
      STRIDE_CHAIN_ID: stride-test
      STRIDE_DENOM: ustrd
      STRIDE_WALLET_1: stride1r5v5srda7xfth3hn2s26txvrcrntldjucq88rn
      STRIDE_WALLET_LIQUID: stride17n3vkvg6lwf98p3kanlhlyjk6zkrfla9zrhma6
      # Relayer variables
      RELAYER: hermes
      HERMES_VERSION: v1.13.2
      RLY_VERSION: "2.5.0"
    jobs:
      set-versions:
        env:
          START: ${{ github.event_name == 'push' && 'v25.0.0' || inputs.from_version }}
          TARGET: ${{ github.event_name == 'push' && 'v25.1.0' || inputs.to_version }}
          NAME: ${{ github.event_name == 'push' && 'v25.1.0' || inputs.upgrade_name }}
        runs-on: ubuntu-24.04
        steps:
          - name: Debug env vars
            run: |
              echo "START: $START"
              echo "TARGET: $TARGET"
              echo "NAME: $NAME"
              ldd --version
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install requests
          - name: Set starting version
            id: start
            run: |
              echo "version=$START" >> $GITHUB_OUTPUT
          - name: Set target version
            id: target
            run: |
              echo "version=$TARGET" >> $GITHUB_OUTPUT
          - name: Set upgrade name
            id: upgrade
            run: |
              echo "name=$NAME" >> $GITHUB_OUTPUT
          - name: Set binary source
            id: binary
            run: |
              if [[ "${TARGET:0:1}" != "v" ]]; then
                echo "source=BUILD" >> $GITHUB_OUTPUT
              else
                echo "source=DOWNLOAD" >> $GITHUB_OUTPUT
              fi
              
        outputs:
         start_version: ${{ steps.start.outputs.version }}
         target_version: ${{ steps.target.outputs.version }}
         upgrade_name: ${{ steps.upgrade.outputs.name }}
         binary_source: ${{ steps.binary.outputs.source }}

      # Test-01-cosmovisor-upgrade:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #       cv_version: [v1.7.1]
      #       upgrade_mechanism: [cv_auto, cv_manual]
      #       enable_cosmovisor: [false, true]
      #       exclude:
      #         - target_version: main
      #           upgrade_mechanism: cv_auto
      #         - enable_cosmovisor: false
      #           upgrade_mechanism: cv_auto
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: ${{ matrix.enable_cosmovisor }}
      #     COSMOVISOR_VERSION: ${{ matrix.cv_version }}
      #     UPGRADE_MECHANISM: ${{ matrix.upgrade_mechanism }}
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     GO_VERSION: 1.24.1
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli
      #     - name: Install Cosmovisor
      #       if: ${{ matrix.enable_cosmovisor == true }}
      #       run: |
      #         go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@$COSMOVISOR_VERSION
      #         echo "$HOME_1/cosmovisor/current/bin" >> $GITHUB_PATH
      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 $whale_log
      #         scripts/wait_for_block.sh 3
          
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh

      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 ${rpc_prefix}$COUNT_WIDTH 5
                  
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh

      #     - name: _API endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_api.sh localhost ${api_prefix}$COUNT_WIDTH
      #     - name: _RPC endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_rpc.sh localhost ${rpc_prefix}$COUNT_WIDTH
  
      # Test-02-ics-optin:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     TOPN: 0
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli

      #     - name: Set up relayer
      #       run: |
      #         source scripts/vars.sh
      #         scripts/setup_relayer.sh

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Add consumer chain with ICS v4.0.0
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh
      #         scripts/add_consumer.sh
      #     - name: Initialize consumer chain with ICS v4.0.0
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh
      #         wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
      #         chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
      #         scripts/setup_consumer_legacy.sh
      #         sleep 20
      #     - name: Spawn consumer chain v400-one
      #       env:
      #         PROVIDER_ICS: v6.4.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh
      #         scripts/spawn_consumer.sh
      #     - name: Start consumer chain v400-one
      #       run: |
      #         source scripts/vars.sh 
      #         source scripts/vars_consumer_v400_one.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
      #     - name: _Pre-upgrade consumer chain produces blocks> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars_consumer_v400_one.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
      #     - name: Establish CCV channel for v400-one
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _Pre-upgrade CCV channel verified> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh
      #         tests/test_ccv_channel.sh
      #         $CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.'
      #     - name: _Pre-upgrade IBC transfer successful> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id

      #     - name: Add consumer chain with ICS v6.4.0
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh
      #         scripts/add_consumer.sh
      #     - name: Initialize consumer chain with ICS v6.4.0  
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh
      #         wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
      #         chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
      #         scripts/setup_consumer.sh
      #         sleep 20
      #     - name: Spawn consumer chain v640-one
      #       env:
      #         PROVIDER_ICS: v6.4.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v640_one.sh
      #         scripts/spawn_consumer.sh
      #     - name: Start consumer chain v640-one
      #       run: |
      #         source scripts/vars.sh 
      #         source scripts/vars_consumer_v640_one.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
      #     - name: _Pre-upgrade consumer chain produces blocks> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars_consumer_v640_one.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
      #     - name: Establish CCV channel for v640-one
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v640_one.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _Pre-upgrade CCV channel verified> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _Pre-upgrade IBC transfer successful> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v640_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id
    
      #     - name: Add consumer chain with ICS v7.0.1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh
      #         scripts/add_consumer.sh
      #     - name: Initialize consumer chain with ICS v7.0.1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh
      #         wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
      #         chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
      #         scripts/setup_consumer.sh
      #         sleep 20
      #     - name: Spawn consumer chain v701-one
      #       env:
      #         PROVIDER_ICS: v6.4.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v701_one.sh
      #         scripts/spawn_consumer.sh
      #     - name: Start consumer chain v701-one
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
      #     - name: _Pre-upgrade consumer chain produces blocks> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars_consumer_v701_one.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

      #     - name: Establish CCV channel for v701-one
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v701_one.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _Pre-upgrade CCV channel verified> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh  
      #         tests/test_ccv_channel.sh
      #         $CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.'
      #     - name: _Pre-upgrade IBC transfer successful> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v701_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id
      # #     # - name: Register consumer reward denoms
      # #     #   env:
      # #     #     CONSUMER_DENOM: ucon
      # #     #     CONSUMER_HOME_1: /home/runner/.v400-1-1
      # #     #   run: |
      # #     #     CONSUMER_CHAIN_BINARY=$CONSUMER_CHAIN_V400_BINARY
      # #     #     echo "> Consumer rewards pool balances:"
      # #     #     $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
      # #     #     last_channel=$($CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.channels[1].channel_id')
      # #     #     echo "> Last channel: $last_channel"
      # #     #     denom_400=$(echo -n "transfer/${last_channel}/$CONSUMER_DENOM" | shasum -a 256 | cut -d ' ' -f1 | tr 'a-z' 'A-Z')
      # #     #     echo "> Denom: $denom_400"
      # #     #     scripts/change_denoms.sh $denom_400
      # #     #     $CHAIN_BINARY q provider registered-consumer-reward-denoms --home $HOME_1 -o json | jq '.'
      # #     #     $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
      # #     #     --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
      # #     #     --gas auto --gas-prices $CONSUMER_GAS_PRICE$CONSUMER_DENOM --gas-adjustment 2 \
      # #     #     --home $CONSUMER_HOME_1 -o json -y | jq '.'
      # #     #     sleep 30
      # #     # - name: Print outstanding rewards
      # #     #   run: |
      # #     #     echo "> Consumer rewards pool balances:"
      # #     #     $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
      # #     #     echo "> Validator outstanding rewards:"
      # #     #     $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'

      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
      #     - name: Restart relayer
      #       run: sudo systemctl restart $RELAYER
    
      #     - name: _CCV channel verified> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _IBC transfer successful> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id

      #     - name: _CCV channel verified> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _IBC transfer successful> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v640_one.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id

      #     - name: _CCV channel verified> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _IBC transfer successful> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v701_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id


      #     - name: Add consumer chain with ICS v7.0.1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_two.sh
      #         scripts/add_consumer.sh
      #     - name: Initialize consumer chain with ICS v7.0.1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_two.sh
      #         wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
      #         chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
      #         scripts/setup_consumer.sh
      #         sleep 20
      #     - name: Spawn consumer chain v701-two
      #       env:
      #         PROVIDER_ICS: v6.4.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v701_two.sh
      #         scripts/spawn_consumer.sh
      #     - name: Start consumer chain v701-two
      #       run: |
      #         source scripts/vars.sh 
      #         source scripts/vars_consumer_v701_two.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
      #     - name: _Pre-upgrade consumer chain produces blocks> ICS v7.0.1 chain 2
      #       run: |
      #         source scripts/vars_consumer_v701_two.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

      #     - name: Establish CCV channel for v701-two
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_two.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _Pre-upgrade CCV channel verified> ICS v7.0.1 chain 2
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_two.sh
      #         tests/test_ccv_channel.sh
      #         $CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.'
      #     - name: _Pre-upgrade IBC transfer successful> ICS v7.0.1 chain 2
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_two.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id

      # #     - name: _Downtime test> val3 must not be jailed 
      # #       run: |
      # #         tests/test_validator_jailed.sh $VALOPER_3 null
          
      # #     - name: Trigger consumer rewards distribution> ICS v6.4.0
      # #       env:
      # #         CONSUMER_HOME_1: /home/runner/.v640-1-1
      # #         CON1_RPC_PORT: 64121
      # #         CON1_P2P_PORT: 64131
      # #       run: |
      # #         export CONSUMER_CHAIN_BINARY=$CONSUMER_CHAIN_V640_BINARY
      # #         echo "> Consumer rewards pool balances:"
      # #         $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
      # #         echo "> Val1 outstanding rewards:"
      # #         $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'
      # #         echo "> Send tx with high fees in consumer chain."
      # #         $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
      # #         --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
      # #         --gas auto --gas-prices $CONSUMER_GAS_PRICE$CONSUMER_DENOM --gas-adjustment 2 \
      # #         --home $CONSUMER_HOME_1 -o json -y | jq '.'
      # #         sleep 30
      # #         echo "> Balance in consumer chain recipient:"
      # #         $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $CONSUMER_HOME_1 -o json | jq '.'
      # #         echo "> Val1 outstanding rewards:"
      # #         $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'

      # #     - name: Register consumer reward denoms
      # #       env:
      # #         CONSUMER_ID: 4
      # #         CONSUMER_DENOM: ucon
      # #         CONSUMER_HOME_1: /home/runner/.v640-1-1
      # #         CON1_RPC_PORT: 64121
      # #         CON1_P2P_PORT: 64131
      # #       run: |
      # #         $CHAIN_BINARY q provider list-consumer-chains -o json --home $HOME_1 | jq -r '.'
      # #         last_channel=$($CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.channels[-1].channel_id')
      # #         echo "> Last channel: $last_channel"
      # #         denom_640=$(echo -n "transfer/${last_channel}/$CONSUMER_DENOM" | shasum -a 256 | cut -d ' ' -f1 | tr 'a-z' 'A-Z')
      # #         echo "> Denom: $denom_640"
      # #         scripts/change_denoms_allowlist.sh $denom_640
      # #         $CHAIN_BINARY q provider consumer-chain $CONSUMER_ID --home $HOME_1 -o json | jq '.'
      # #         $CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq '.'
      # #         # echo "> Trigger additional rewards"
      # #         # $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
      # #         # --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
      # #         # --gas auto --gas-prices $CONSUMER_GAS_PRICE$CONSUMER_DENOM --gas-adjustment 2 \
      # #         # --home $CONSUMER_HOME_1 -o json -y | jq '.'
      # #         sleep 30
      # #         echo "**************HERMES**************"
      # #         journalctl -u hermes | tail -n 200
      # #         echo "**************GAIA**************"
      # #         journalctl -u $PROVIDER_SERVICE_1 | tail -n 200

      # #     - name: _Consumer rewards distribution> ICS v6.4.0
      # #       run: |
      # #         last_channel=$($CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.channels[-1].channel_id')
      # #         ibc_denom=ibc/$(echo -n "transfer/${last_channel}/$CONSUMER_DENOM" | shasum -a 256 | cut -d ' ' -f1 | tr 'a-z' 'A-Z')
      # #         echo "> Denom: $ibc_denom"
      # #         echo "> Consumer rewards pool balances:"
      # #         $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
      # #         echo "> Val1 outstanding rewards:"
      # #         $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'
      # #         val1_rewards=$(curl -s http://localhost:$VAL1_API_PORT/cosmos/distribution/v1beta1/validators/$VALOPER_1/outstanding_rewards | jq -r '.rewards.rewards')
      # #         echo "> val1_rewards: $val1_rewards"
      # #         val1_consumer_rewards=$(echo $val1_rewards | jq -r --arg DENOM "$ibc_denom" '.[] | select(.denom==$DENOM).amount')
      # #         echo "> val1_consumer_rewards: $val1_consumer_rewards"
      # #         if [ -z "$val1_consumer_rewards" ]; then
      # #           echo "FAIL: No consumer rewards distributed to val1."
      # #           echo "**************HERMES**************"
      # #           journalctl -u hermes | tail -n 200
      # #           echo "**************GAIA**************"
      # #           journalctl -u $SERVICE_1 | tail -n 200
      # #           exit 1
      # #         else
      # #           echo "PASS: Consumer rewards distributed to val1."
      # #         fi

      # #     - name: _Downtime test> val3 must not be jailed 
      # #       run: |
      # #         tests/test_validator_jailed.sh $VALOPER_3 null
      # #         $CHAIN_BINARY q provider list-consumer-chains -o json --home $HOME_1 | jq '.'
      # #     - name: Stop validator services
      # #       env:
      # #         CONSUMER_SERVICE_2: v640-1-2.service
      # #         CONSUMER_SERVICE_3: v640-1-3.service
      # #         CONSUMER_ID: 4
      # #       run: |
      # #         $CHAIN_BINARY tx provider opt-out $CONSUMER_ID --from $WALLET_3 --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE$DENOM --home $HOME_1 -y
      # #         $CHAIN_BINARY q staking validators --home $HOME_1 -o json | jq '.'
      # #         sleep $(($COMMIT_TIMEOUT*30))
      # #         $CHAIN_BINARY q provider consumer-opted-in-validators $CONSUMER_ID --home $HOME_1
      # #         # $CHAIN_BINARY q provider consumer-opted-in-validators v640-one --home $HOME_1
      # #         sudo systemctl disable $CONSUMER_SERVICE_2 --now
      # #         sudo systemctl disable $CONSUMER_SERVICE_3 --now
      # #         sleep $(($COMMIT_TIMEOUT*30))
      # #     - name: _Downtime test> val2 must be jailed - 1
      # #       run: |
      # #         tests/test_validator_jailed.sh $VALOPER_2 true
      # #         $CHAIN_BINARY q staking validators --home $HOME_1 -o json | jq '.'
      # #     - name: _Downtime test> val3 must not be jailed 
      # #       run: |
      # #         tests/test_validator_jailed.sh $VALOPER_3 null
      # #     - name: Unjail validator
      # #       env:
      # #         CONSUMER_SERVICE_2: v640-1-2.service
      # #       run: |
      # #         sudo systemctl enable $CONSUMER_SERVICE_2 --now
      # #         sleep $(($COMMIT_TIMEOUT*10))
      # #         $CHAIN_BINARY tx slashing unjail --from $WALLET_2 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE$DENOM -y --home $HOME_1
      # #         sleep $(($COMMIT_TIMEOUT*2))
      # #     - name: _Downtime test> val2 must not be jailed 
      # #       run: |
      # #         tests/test_validator_jailed.sh $VALOPER_2 null
      # #     # - name: Change infraction parameter
      # #     #   env:
      # #     #     CONSUMER_ID: 0
      # #     #   run: |
      # #     #     scripts/update_consumer.sh
      # #     - name: Stop validator services
      # #       env:
      # #         CONSUMER_SERVICE_2: v640-1-2.service
      # #       run: |
      # #         $CHAIN_BINARY q staking validators --home $HOME_1 -o json | jq '.'
      # #         sudo systemctl disable $CONSUMER_SERVICE_2 --now
      # #         sleep $(($COMMIT_TIMEOUT*30))
      # #     - name: _Downtime test> val2 must be jailed - 2
      # #       run: |
      # #         tests/test_validator_jailed.sh $VALOPER_2 true
      # #         $CHAIN_BINARY q staking validators --home $HOME_1 -o json | jq '.'
      # #     - name: Unjail validator
      # #       env:
      # #         CONSUMER_SERVICE_2: v640-1-2.service
      # #       run: |
      # #         sudo systemctl enable $CONSUMER_SERVICE_2 --now
      # #         sleep $(($COMMIT_TIMEOUT*10))
      # #         $CHAIN_BINARY tx slashing unjail --from $WALLET_2 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE$DENOM -y --home $HOME_1
      # #         sleep $(($COMMIT_TIMEOUT*2))
      # #     - name: _Downtime test> val2 must not be jailed 
      # #       run: |
      # #         tests/test_validator_jailed.sh $VALOPER_2 null
          
      # #     # - name: _Test equivocation tx
      # #     #   env:
      # #     #     CONSUMER_CHAIN_ID: v450-two
      # #     #     CONSUMER_HOME_1: /home/runner/.v450-2-1
      # #     #     CONSUMER_HOME_2: /home/runner/.v450-2-2
      # #     #     CONSUMER_HOME_3: /home/runner/.v450-2-3
      # #     #     CONSUMER_SERVICE_1: v450-2-1.service
      # #     #     CONSUMER_SERVICE_2: v450-2-2.service
      # #     #     CONSUMER_SERVICE_3: v450-2-3.service
      # #     #     CON1_RPC_PORT: 40221
      # #     #     CON1_P2P_PORT: 40231
      # #     #     CON2_P2P_PORT: 40232
      # #     #     CON3_P2P_PORT: 40233
      # #     #   run: |
      # #     #     export CONSUMER_CHAIN_BINARY=$CONSUMER_CHAIN_V450_BINARY
      # #     #     scripts/consumer-double-sign-tx.sh
  
      # #     # - name: _Test light client attack
      # #     #   env:
      # #     #     CONSUMER_CHAIN_ID: v450-two
      # #     #     CONSUMER_HOME_1: /home/runner/.v450-2-1
      # #     #     CONSUMER_HOME_2: /home/runner/.v450-2-2
      # #     #     CONSUMER_HOME_3: /home/runner/.v450-2-3
      # #     #     CONSUMER_SERVICE_1: v450-2-1.service
      # #     #     CONSUMER_SERVICE_2: v450-2-2.service
      # #     #     CONSUMER_SERVICE_3: v450-2-3.service
      # #     #     CON1_RPC_PORT: 40221
      # #     #     CON1_P2P_PORT: 40231
      # #     #     CON2_P2P_PORT: 40232
      # #     #     CON3_P2P_PORT: 40233
      # #     #   run: |
      # #     #     cp templates/hermes-config-lc.toml /home/runner/.hermes/config-lc.toml
      # #     #     export CONSUMER_CHAIN_BINARY=$CONSUMER_CHAIN_V450_BINARY
      # #     #     scripts/consumer-light-client-tx.sh
  
      # #     # - name: _Remove consumer chain> ICS v4.5.0 chain 2
      # #     #   run: |
      # #     #     echo "Consumer chains:"
      # #     #     $CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq '.'
      # #     #     consumer_id=$($CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq -r '.chains[] | select(.chain_id == "v450-two").consumer_id')
      # #     #     echo "Removing v450-two (consumer_id = $consumer_id):"
      # #     #     $CHAIN_BINARY tx provider remove-consumer $consumer_id --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE$DENOM -y --home $HOME_1
      # #     #     sleep $(($COMMIT_TIMEOUT*2))
      # #     #     echo "Consumer chains:"
      # #     #     $CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq '.'
      # #     #     phase=$($CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq -r '.chains[] | select(.chain_id == "v450-two").phase')
      # #     #     if [[ "$phase" -eq "CONSUMER_PHASE_STOPPED" ]]; then
      # #     #       echo "PASS: Consumer chain was stopped."
      # #     #     else
      # #     #       echo "FAIL: Consumer chain was not stopped."
      # #     #       exit 1
      # #     #     fi
      # #     # - name: _Remove consumer chain> ICS v4.0.0 chain 1
      # #     #   run: |
      # #     #     echo "Consumer chains:"
      # #     #     $CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq '.'
      # #     #     consumer_id=$($CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq -r '.chains[] | select(.chain_id == "v400-one").consumer_id')
      # #     #     echo "Removing v400-one (consumer_id = $consumer_id):"
  
      # #     #     jq -r --arg CONSUMER "$consumer_id" '.messages[0].consumer_id |= $CONSUMER' templates/proposal-remove-consumer.json > remove-consumer.json
      # #     #     jq '.' remove-consumer.json
      # #     #     txhash=$($CHAIN_BINARY tx gov submit-proposal remove-consumer.json --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE$DENOM -y --home $HOME_1 -o json | jq -r '.txhash')
      # #     #     sleep $(($COMMIT_TIMEOUT*2))
      # #     #     proposal_id=$($CHAIN_BINARY --output json q tx $txhash --home $HOME_1 | jq -r '.events[] | select(.type=="submit_proposal") | .attributes[] | select(.key=="proposal_id") | .value')
      # #     #     echo "Voting on consumer removal proposal $proposal_id."
      # #     #     $CHAIN_BINARY tx gov vote $proposal_id yes --from $WALLET_1 --gas auto --gas-prices 0.005$DENOM --gas-adjustment 3 --yes --home $HOME_1
      # #     #     sleep $(($COMMIT_TIMEOUT*2))
      # #     #     sleep $VOTING_PERIOD
      # #     #     echo "Consumer chains:"
      # #     #     $CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq '.'
      # #     #     phase=$($CHAIN_BINARY q provider list-consumer-chains --home $HOME_1 -o json | jq -r '.chains[] | select(.chain_id == "v400-one").phase')
      # #     #     if [[ "$phase" -eq "CONSUMER_PHASE_STOPPED" ]]; then
      # #     #       echo "PASS: Consumer chain was stopped."
      # #     #     else
      # #     #       echo "FAIL: Consumer chain was not stopped."
      # #     #       exit 1
      # #     #     fi
  
      # Test-03-ics-topn:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     TOPN: 95
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli

      #     - name: Set up relayer
      #       run: |
      #         source scripts/vars.sh
      #         scripts/setup_relayer.sh

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Add consumer chain with ICS v4.0.0 - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh
      #         scripts/add_consumer.sh
      #         # consumer_chain=$($CHAIN_BINARY q txs --query "create_consumer.consumer_chain_id='v400-one'" -o json --home $whale_home | jq -r '.txs[0].tx..msg[0].consumer_chain_id')
      #         scripts/consumer_set_gov_owner.sh
      #         scripts/consumer_set_topn.sh
      #     - name: Initialize consumer chain with ICS v4.0.0 - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh
      #         wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
      #         chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
      #         scripts/setup_consumer_legacy.sh
      #         sleep 20
      #     - name: Spawn consumer chain v400-one
      #       env:
      #         PROVIDER_ICS: v6.4.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh
      #         scripts/spawn_consumer_topn.sh
      #     - name: Start consumer chain v400-one
      #       run: |
      #         source scripts/vars.sh 
      #         source scripts/vars_consumer_v400_one.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

      #     - name: _Pre-upgrade consumer chain produces blocks> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars_consumer_v400_one.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
      #     - name: Establish CCV channel for v400-one
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _Pre-upgrade CCV channel verified> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _Pre-upgrade IBC transfer successful> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id
          
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: "${{ matrix.target_version }}"
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}

      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
      #     - name: Restart relayer
      #       run: sudo systemctl restart $RELAYER
    
      #     - name: _CCV channel verified> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _IBC transfer successful> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id
              
      #     - name: Set Top N to 0 for ICS v4.0.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh
      #         export TOPN=0
      #         scripts/consumer_set_topn.sh

      #     - name: Opt out from top n-1 validators 
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v400_one.sh
      #         $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home
      #         scripts/consumer_opt_out.sh
      #         $CHAIN_BINARY q comet-validator-set --home $whale_home
      #         $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home

      #     - name: _Consumer chain produces blocks after top N = 0> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars_consumer_v400_one.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

      #     # - name: _CCV channel verified> ICS v4.0.0 chain 1
      #     #   run: |
      #     #     source scripts/vars.sh
      #     #     source scripts/vars_consumer_v400_one.sh  
      #     #     tests/test_ccv_channel.sh

      #     - name: _IBC transfer successful> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v400_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id


      #     - name: Add consumer chain with ICS v6.4.0 - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh
      #         scripts/add_consumer.sh
      #         scripts/consumer_set_gov_owner.sh
      #         scripts/consumer_set_topn.sh

      #     - name: Initialize consumer chain with ICS v6.4.0 - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh
      #         wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
      #         chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
      #         scripts/setup_consumer.sh
      #         sleep 20

      #     - name: Spawn consumer chain v640-one
      #       env:
      #         PROVIDER_ICS: v6.4.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v640_one.sh
      #         scripts/spawn_consumer_topn.sh

      #     - name: Start consumer chain v640-one
      #       run: |
      #         source scripts/vars.sh 
      #         source scripts/vars_consumer_v640_one.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

      #     - name: _Consumer chain produces blocks> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars_consumer_v640_one.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
      #     - name: Establish CCV channel for v640-one
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _CCV channel verified> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v640_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _IBC transfer successful> ICS v6.4.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v640_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id

      #     - name: Add consumer chain with ICS v7.0.1 - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh
      #         scripts/add_consumer.sh
      #         scripts/consumer_set_gov_owner.sh
      #         scripts/consumer_set_topn.sh

      #     - name: Initialize consumer chain with ICS v7.0.1 - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh
      #         wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
      #         chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
      #         scripts/setup_consumer.sh
      #         sleep 20

      #     - name: Spawn consumer chain v640-one
      #       env:
      #         PROVIDER_ICS: v6.4.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v701_one.sh
      #         scripts/spawn_consumer_topn.sh

      #     - name: Start consumer chain v701-one
      #       run: |
      #         source scripts/vars.sh 
      #         source scripts/vars_consumer_v701_one.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

      #     - name: _Consumer chain produces blocks> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars_consumer_v701_one.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
      #     - name: Establish CCV channel for v640-one
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _CCV channel verified> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_v701_one.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _IBC transfer successful> ICS v7.0.1 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_v701_one.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id              


          # - name: Query consumer chains
          #   run: $CHAIN_BINARY q provider list-consumer-chains --home $HOME_1
          # - name: _Downtime test> val3 must not be jailed 
          #   run: |
          #     tests/test_validator_jailed.sh $VALOPER_3 null
          # - name: Stop validator services
          #   env:
          #     CONSUMER_SERVICE_2: v450-2-2.service
          #     CONSUMER_SERVICE_3: v450-2-3.service
          #   run: |
          #     sudo systemctl disable $CONSUMER_SERVICE_2 --now
          #     sudo systemctl disable $CONSUMER_SERVICE_3 --now
          #     sleep $(($COMMIT_TIMEOUT*30))
          # - name: _Downtime test> val2 must be jailed - 1
          #   run: tests/test_validator_jailed.sh $VALOPER_2 true
          # - name: _Downtime test> val3 must not be jailed 
          #   run: |
          #     tests/test_validator_jailed.sh $VALOPER_3 null
          # - name: Unjail validator
          #   env:
          #     CONSUMER_SERVICE_2: v450-2-2.service
          #   run: |
          #     sudo systemctl enable $CONSUMER_SERVICE_2 --now
          #     sleep $(($COMMIT_TIMEOUT*10))
          #     $CHAIN_BINARY tx slashing unjail --from $WALLET_2 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE$DENOM -y --home $HOME_1
          #     sleep $(($COMMIT_TIMEOUT*2))
          # - name: _Downtime test> val2 must not be jailed
          #   run: tests/test_validator_jailed.sh $VALOPER_2 null
          # - name: Stop validator services
          #   env:
          #     CONSUMER_SERVICE_2: v450-2-2.service
          #   run: |
          #     sudo systemctl disable $CONSUMER_SERVICE_2 --now
          #     sleep $(($COMMIT_TIMEOUT*30))
          # - name: _Downtime test> val2 must be jailed - 2
          #   run: tests/test_validator_jailed.sh $VALOPER_2 true

          # - name: _Transactions verified> bank send, delegate, and withdraw rewards
          #   run: |
          #     source scripts/vars.sh
          #     tests/test_tx.sh
          # - name: _API endpoints check
          #   run: |
          #     source scripts/vars.sh
          #     tests/test_endpoints_api.sh localhost $whale_api
          # - name: _RPC endpoints check
          #   run: |
          #     source scripts/vars.sh
          #     tests/test_endpoints_rpc.sh localhost $whale_rpc
  
      # Test-04-pfm:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli
          
      #     - name: Set up relayer
      #       run: |
      #         source scripts/vars.sh
      #         scripts/setup_relayer.sh

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Start pfm1 chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars_pfm_1.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Start pfm2 chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars_pfm_2.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Start pfm3 chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars_pfm_3.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Create transfer channels for PFM test
      #       run: |
      #         source scripts/vars.sh
      #         if [ $RELAYER == "hermes" ]; then
      #           echo "Creating channels with Hermes..."
      #           hermes create channel --new-client-connection --a-chain $CHAIN_ID --b-chain pfm1 --a-port transfer --b-port transfer --yes
      #           hermes create channel --new-client-connection --a-chain pfm1 --b-chain pfm2 --a-port transfer --b-port transfer --yes
      #           hermes create channel --new-client-connection --a-chain pfm2 --b-chain pfm3 --a-port transfer --b-port transfer --yes
      #         elif [ $RELAYER == "rly" ]; then
      #           echo "Creating channel with Go relayer..."
      #           echo "Paths"
      #           rly paths new testnet pfm1 pfm-path-1
      #           rly paths new pfm1 pfm2 pfm-path-2
      #           rly paths new pfm2 pfm3 pfm-path-3
      #           echo "Clients"
      #           rly transact client testnet pfm1 pfm-path-1
      #           rly transact client pfm1 pfm2 pfm-path-2
      #           rly transact client pfm2 pfm3 pfm-path-3
      #           sleep 5
      #           echo "Connections"
      #           rly transact connection pfm-path-1
      #           rly transact connection pfm-path-2
      #           rly transact connection pfm-path-3
      #           sleep 5
      #           echo "Channels"
      #           rly transact channel pfm-path-1
      #           rly transact channel pfm-path-2
      #           rly transact channel pfm-path-3
      #         fi
      #         sudo systemctl restart $RELAYER
      #         # $CHAIN_BINARY q ibc connection connections --home /home/runner/.pfm1 -o json
      #         # $CHAIN_BINARY q ibc connection connections --home /home/runner/.pfm2 -o json
      #         # $CHAIN_BINARY q ibc connection connections --home /home/runner/.pfm3 -o json
      #     - name: _Test PFM transfers
      #       run: |
      #         source scripts/vars_pfm_3.sh
      #         tests/test_pfm_transfers.sh
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: "${{ matrix.target_version }}"
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}  
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5

      #     - name: Restart relayer
      #       run: sudo systemctl restart $RELAYER

      #     - name: _Test PFM transfers
      #       env:
      #         PFM_HOME: /home/runner/.pfm3
      #       run: |
      #         tests/test_pfm_transfers.sh
    
      # Test-05-liquid-staking:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     # Consumer chain variables
      #     RECIPIENT: cosmos1r5v5srda7xfth3hn2s26txvrcrntldjumt8mhl
      #     CONSUMER_ICS: v4.0.0
      #     PROVIDER_ICS: v3.3.0
      #     # Reference ICS chain variables
      #     ICS_TRANSFORM_BINARY_URL: https://github.com/hyphacoop/cosmos-builds/releases/download/ics-v3.3.0-transform/interchain-security-cd
      #     ICS_TRANSFORM_BINARY: cd-transform
      #     STRIDE_WALLET_1: stride1r5v5srda7xfth3hn2s26txvrcrntldjucq88rn
      #     STRIDE_WALLET_LIQUID: stride17n3vkvg6lwf98p3kanlhlyjk6zkrfla9zrhma6
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli
      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Set up happy path LSM accounts
      #       run: |
      #         source scripts/vars.sh
      #         scripts/lsm_account_setup.sh

      #     - name: Pre-upgrade x/liquid happy path
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_liquid_happy_path.sh
    
      #     - name: Tokenize with upgrade_wallet
      #       run: |
      #         source scripts/vars.sh
      #         upgrade_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="upgrade_wallet").address')
      #         echo "> Delegating."
      #         $CHAIN_BINARY tx staking delegate $VALOPER_1 1000000uatom --from upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home
      #         sleep $(($COMMIT_TIMEOUT+2))
      #         echo "> Tokenizing."
      #         echo "> Command: $CHAIN_BINARY tx liquid tokenize-share $VALOPER_1 1000000$DENOM $upgrade_wallet --from upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home"
      #         $CHAIN_BINARY tx liquid tokenize-share $VALOPER_1 1000000$DENOM $upgrade_wallet --from upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home
      #         sleep $(($COMMIT_TIMEOUT+2))
      #         $CHAIN_BINARY q bank balances $upgrade_wallet --home $HOME_1 -o json | jq '.'
          
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
      #     - name: Redeem tokens with upgrade_wallet
      #       run: |
      #         source scripts/vars.sh
      #         upgrade_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="upgrade_wallet").address')
      #         $CHAIN_BINARY q bank balances $upgrade_wallet --home $whale_home -o json | jq '.'
      #         liquid_denom=$($CHAIN_BINARY q bank balances $upgrade_wallet --home $whale_home -o json | jq -r '.balances[-2].denom')
      #         $CHAIN_BINARY q staking delegations $upgrade-wallet --home $whale_home -o json | jq '.'
      #         echo "> Denom: $liquid_denom"
      #         echo "> Command: $CHAIN_BINARY tx liquid redeem-tokens 1000000$liquid_denom --from $whale_home -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home"
      #         $CHAIN_BINARY tx liquid redeem-tokens 1000000$liquid_denom --from $upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home
      #         sleep $(($COMMIT_TIMEOUT+2))
      #         $CHAIN_BINARY q bank balances $upgrade_wallet --home $whale_home -o json | jq '.'
      #         $CHAIN_BINARY q staking delegations $upgrade_wallet --home $whale_home -o json | jq '.'
      #         delegation_amount=$($CHAIN_BINARY q staking delegations $upgrade_wallet --home $whale_home -o json | jq -r '.delegation_responses[0].balance.amount')
      #         echo "> Delegation_amount: $delegation_amount"
      #         if [[ "$delegation_amount" == "1000000" ]]; then
      #             echo "Token redemption succeeded."
      #         else
      #             echo "Token redemption failed."
      #             exit 0
      #         fi

      #     - name: _Test x/liquid happy path
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_liquid_happy_path.sh
    
      # Test-06-mainnet-topn-consumer-chains:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     # Consumer chain variables
      #     RECIPIENT: cosmos1r5v5srda7xfth3hn2s26txvrcrntldjumt8mhl

      #     # Reference ICS chain variables
      #     TOPN: 95
      #     ICS_TRANSFORM_BINARY_URL: https://github.com/hyphacoop/cosmos-builds/releases/download/ics-v3.3.0-transform/interchain-security-cd
      #     ICS_TRANSFORM_BINARY: cd-transform
      #     STRIDE_WALLET_1: stride1r5v5srda7xfth3hn2s26txvrcrntldjucq88rn
      #     STRIDE_WALLET_LIQUID: stride17n3vkvg6lwf98p3kanlhlyjk6zkrfla9zrhma6
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli
      #     - name: Set up relayer
      #       run: |
      #         source scripts/vars.sh
      #         scripts/setup_relayer.sh
      #     # - name: Download consumer chain binaries
      #     #   run: |
      #     #     wget $ICS_TRANSFORM_BINARY_URL -O $HOME/go/bin/$ICS_TRANSFORM_BINARY -q
      #     #     chmod +x $HOME/go/bin/$ICS_TRANSFORM_BINARY

      #     - name: Install Stride binary
      #       run: |
      #         source scripts/vars_consumer_stride.sh
      #         go version
      #         git clone https://github.com/Stride-Labs/stride.git 
      #         cd stride
      #         git checkout $STRIDE_VERSION
      #         make install
              
      #     # - name: Consumer chain binary URLs
      #     #   run: |
      #     #     echo "$NEUTRON_BINARY runs $($NEUTRON_BINARY version)"
      #     #     echo "$STRIDE_BINARY runs off $($STRIDE_BINARY version)"

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Add Stride chain - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_stride.sh
      #         scripts/add_consumer.sh
      #         scripts/consumer_set_gov_owner.sh
      #         scripts/consumer_set_topn.sh
      #     - name: Initialize consumer chain stride-test - top N
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_stride.sh
      #         scripts/setup_consumer_legacy.sh
      #         sleep 20
      #     - name: Spawn consumer chain stride-test
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_stride.sh
      #         scripts/spawn_consumer_topn.sh
      #     - name: Start consumer chain stride-test
      #       run: |
      #         source scripts/vars.sh 
      #         source scripts/vars_consumer_stride.sh
      #         ./start-$CONSUMER_CHAIN_ID.sh
      #         sleep 10
      #         tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
      #     - name: Establish CCV channel for stride-test
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_stride.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "Creating channel with Hermes..."
      #         hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #         hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _Pre-upgrade CCV channel verified> Stride
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_stride.sh
      #         tests/test_ccv_channel.sh
      #         $CHAIN_BINARY q ibc channel channels -o json --home $whale_home | jq -r '.'
      #     - name: _Pre-upgrade IBC transfer successful> Stride
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_stride.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id

      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
      #     - name: Restart relayer
      #       run: sudo systemctl restart $RELAYER
    
      #     - name: _CCV channel verified> stride-test
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_stride.sh  
      #         tests/test_ccv_channel.sh
      #     - name: _IBC transfer successful> stride-test
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_stride.sh 
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id

      #     - name: Set Top N to 0 for ICS v4.0.0
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_stride.sh
      #         export TOPN=0
      #         scripts/consumer_set_topn.sh

      #     - name: Opt out from top n-1 validators 
      #       run: |
      #         source scripts/vars.sh
      #         source scripts/vars_consumer_stride.sh
      #         $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home
      #         scripts/consumer_opt_out.sh
      #         $CHAIN_BINARY q comet-validator-set --home $whale_home
      #         $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home

      #     - name: _Consumer chain produces blocks after top N = 0> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars_consumer_stride.sh
      #         tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

      #     - name: _IBC transfer successful> ICS v4.0.0 chain 1
      #       run: |
      #         source scripts/vars.sh  
      #         source scripts/vars_consumer_stride.sh
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_consumer_ibc_transfer.sh $channel_id
    
      # Test-07-vesting-liquid-staking:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     VESTING_AMOUNT: 110000000
      #     VESTING_DELEGATED_AMOUNT: 100000000
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Set up vesting account
      #       run: |
      #         source scripts/vars.sh
      #         echo "Creating vesting wallet..."
      #         $CHAIN_BINARY keys add vesting --home $whale_home
      #         vesting_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="vesting").address')
      #         start_time=$(date +%s)
      #         echo "start time: $start_time"
      #         end_time=$(date -d '10 minutes'  +%s)
      #         echo "end time: $end_time"
      #         $CHAIN_BINARY tx vesting create-vesting-account \
      #         $vesting_wallet $VESTING_AMOUNT$DENOM $end_time \
      #         --from $WALLET_1 --home $whale_home \
      #         --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y
      #         sleep $COMMIT_TIMEOUT
      #         sleep $COMMIT_TIMEOUT
    
      #         echo "Saving vesting times..."
      #         duration=$(echo "$end_time - $start_time" | bc -l)
      #         echo "duration: $duration"
      #         echo "vesting_start_time=$start_time" >> $GITHUB_ENV
      #         echo "vesting_end_time=$end_time" >> $GITHUB_ENV
      #         echo "vesting_duration=$duration" >> $GITHUB_ENV
    
      #     # - name: Set up bonding
      #     #   run: |
      #     #     source scripts/vars.sh
      #     #     $CHAIN_BINARY tx staking validator-bond $VALOPER_1 --from $WALLET_1 --home $whale_home --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y
    
      #     - name: Delegate with vesting wallet
      #       run: |
      #         source scripts/vars.sh
      #         vesting_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="vesting").address')
      #         $CHAIN_BINARY q bank spendable-balances $vesting_wallet --home $whale_home -o json | jq '.'
      #         echo "Delegating from vesting wallet..."
      #         $CHAIN_BINARY tx staking delegate $VALOPER_1 $VESTING_DELEGATED_AMOUNT$DENOM \
      #         --from $vesting_wallet --home $whale_home \
      #         --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y
      #         sleep $COMMIT_TIMEOUT
      #         sleep $COMMIT_TIMEOUT
      
    
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
      #     - name: Tokenize with vesting wallet
      #       run: |
      #         source scripts/vars.sh
      #         vesting_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="vesting").address')
      #         $CHAIN_BINARY q staking delegations $vesting_wallet --home $whale_home -o json | jq '.'
  
      #         echo "vesting_start_time = $vesting_start_time"
      #         echo "vesting_end_time = $vesting_end_time"
      #         echo "vesting_duration = $vesting_duration"
    
      #         echo "Calculating vested delegation..."
      #         current_epoch=$(date +%s)
      #         echo "epoch: $current_epoch"
      #         elapsed_time=$(echo "$current_epoch - $vesting_start_time" | bc)
      #         echo "elapsed_time: $elapsed_time"
      #         vested_ratio=$(echo "$elapsed_time / $vesting_duration" | bc -l)
      #         echo "vested ratio: $vested_ratio"
      #         vested_amount=$(echo "($vested_ratio * $VESTING_DELEGATED_AMOUNT)/1" | bc)
      #         echo "vested amount: $vested_amount"
    
      #         # $CHAIN_BINARY tx staking tokenize-share $VALOPER_1 $vested_amount$DENOM $vesting_wallet --from $vesting_wallet --home $whale_home --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y
      #         txhash=$($CHAIN_BINARY tx liquid tokenize-share $VALOPER_1 100000$DENOM $vesting_wallet --from $vesting_wallet --home $whale_home --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json | jq -r '.txhash')
      #         echo "txhash: $txhash"
    
      #         sleep $COMMIT_TIMEOUT
      #         $CHAIN_BINARY q bank balances $vesting_wallet --home $whale_home -o json | jq -r '.balances[] | select(.denom == "cosmosvaloper1r5v5srda7xfth3hn2s26txvrcrntldju7lnwmv/1")'
      #         liquid_tokens=$($CHAIN_BINARY q bank balances $vesting_wallet --home $whale_home -o json | jq -r '.balances[] | select(.denom == "cosmosvaloper1r5v5srda7xfth3hn2s26txvrcrntldju7lnwmv/1").amount')
      #         echo "liquid tokens: $liquid_tokens"
      #         if [[ "$liquid_tokens" -gt "0" ]]; then
      #           echo "PASS: Greater than zero amount in liquid tokens balance."
      #         else
      #           echo "FAIL: No liquid tokens balance."
      #           exit 0
      #         fi

      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh
      #     - name: _API endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_api.sh localhost $whale_api
      #     - name: _RPC endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_rpc.sh localhost $whale_rpc

      # Test-08-ICA-controller:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     CHAIN_BINARY_SECONDARY: gaiad-ibc
      #     COMMIT_TIMEOUT: 1
      #     RELAYER: hermes
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli
      #     - name: Set up relayer
      #       run: |
      #         source scripts/vars.sh
      #         scripts/setup_relayer.sh

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3
      #     # - name: Start chain
      #     #   env:
      #     #     START_VERSION: ${{matrix.start_version}}
      #     #   run: |
      #     #     export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/$START_VERSION/gaiad-$START_VERSION-linux-amd64
      #     #     scripts/start_chain_single_val.sh
      #     # - name: Check Gaia log
      #       # run: sudo journalctl -u $PROVIDER_SERVICE_1
      #     # - name: Print Gaia version
      #       # run: $CHAIN_BINARY version --long
      #     # - name: Block production check
      #       # run: tests/test_block_production.sh 127.0.0.1 $VAL1_RPC_PORT 5 # 5 blocks
    
      #     - name: Start host chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars_ica.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3
      #     - name: Generate host connection
      #       env:
      #         CHAIN_1: testnet
      #         CHAIN_2: ica
      #       run: |
      #         hermes create client --host-chain $CHAIN_1 --reference-chain $CHAIN_2
      #         hermes create client --reference-chain $CHAIN_1 --host-chain $CHAIN_2
      #         hermes create connection --a-chain $CHAIN_1 --a-client 07-tendermint-0 --b-client 07-tendermint-0
      #         sudo systemctl start $RELAYER
      #     - name: _Test ICA controller - register ICA with controller1
      #       run: |
      #         source scripts/vars.sh
      #         echo "> Registering ICA."
      #         $CHAIN_BINARY keys add controller1 --home $whale_home
      #         controller1=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller1").address')
      #         $CHAIN_BINARY tx bank send $WALLET_1 $controller1 100000000$DENOM --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
      #         sleep $COMMIT_TIMEOUT
      #         txhash=$($CHAIN_BINARY tx interchain-accounts controller register connection-0 --ordering ORDER_ORDERED --version "" --from $controller1 --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home | jq -r '.txhash')
      #         sleep 60
      #         echo "txhash: $txhash"
      #         $CHAIN_BINARY q tx $txhash --home $whale_home -o json | jq '.'
      #         journalctl -u hermes
      #         tail -n 100 $whale_log
      #         ica_address=$($CHAIN_BINARY q interchain-accounts controller interchain-account $controller1 connection-0 --home $whale_home -o json | jq -r '.address')
      #         echo "ICA address: $ica_address"
      #         echo "> Funding ICA."
      #         source scripts/vars_ica.sh
      #         $CHAIN_BINARY tx bank send $WALLET_1 $ica_address 100000000$DENOM --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
      #         sleep 10

      #     - name: _Test ICA send
      #       run: |
      #         source scripts/vars.sh
      #         controller1=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller1").address')
      #         $CHAIN_BINARY keys add recipient1 --home $whale_home
      #         recipient_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="recipient1").address')
      #         tests/test_ica_send.sh $controller1 $recipient_wallet
      
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
          
      #     - name: Restart relayer
      #       run: |
      #         sudo systemctl restart $RELAYER
      #         sleep 1m
      #     - name: _Test ICA controller - register ICA with controller2
      #       env:
      #         CONTROLLER_HOME: /home/runner/.val1
      #         HOST_HOME: /home/runner/.host
      #       run: |
      #         source scripts/vars.sh
      #         echo "> Registering ICA."
      #         $CHAIN_BINARY keys add controller2 --home $whale_home
      #         controller2=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller2").address')
      #         $CHAIN_BINARY tx bank send $WALLET_1 $controller2 100000000$DENOM --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
      #         sleep $COMMIT_TIMEOUT
      #         txhash=$($CHAIN_BINARY tx interchain-accounts controller register connection-0 --ordering ORDER_ORDERED --version "" --from $controller2 --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home | jq -r '.txhash')
      #         sleep 60
      #         echo "txhash: $txhash"
      #         $CHAIN_BINARY q tx $txhash --home $whale_home -o json | jq '.'
      #         journalctl -u hermes
      #         tail -n 100 $whale_log
      #         ica_address=$($CHAIN_BINARY q interchain-accounts controller interchain-account $controller2 connection-0 --home $whale_home -o json | jq -r '.address')
      #         echo "ICA address: $ica_address"
      #         echo "> Funding ICA."
      #         source scripts/vars_ica.sh
      #         $CHAIN_BINARY tx bank send $WALLET_1 $ica_address 100000000$DENOM --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
      #         sleep 10
      #     - name: _Test ICA send with post-upgrade account
      #       run: |
      #         source scripts/vars.sh
      #         controller2=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller2").address')
      #         $CHAIN_BINARY keys add recipient2 --home $whale_home
      #         recipient_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="recipient2").address')
      #         tests/test_ica_send.sh $controller2 $recipient_wallet
      #     - name: _Test ICA send with pre-upgrade account
      #       run: |
      #         source scripts/vars.sh
      #         controller1=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller1").address')
      #         $CHAIN_BINARY keys add recipient3 --home $whale_home
      #         recipient_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="recipient3").address')
      #         tests/test_ica_send.sh $controller1 $recipient_wallet

      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh
      #     - name: _API endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_api.sh localhost $whale_api
      #     - name: _RPC endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_rpc.sh localhost $whale_rpc
  
      # Test-09-cosmwasm:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: _Test counter contract
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_contract_counter.sh

      #     - name: _Test multisig contract
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_contract_multisig.sh

      #     - name: Change consensus and feemarket params
      #       run: |
      #         source scripts/vars.sh  
      #         txhash=$($CHAIN_BINARY tx gov submit-proposal templates/proposal-consensus-feemarket-params.json --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y -o json | jq -r '.txhash')
      #         echo "tx hash: $txhash"
      #         sleep $(($COMMIT_TIMEOUT+2))
      #         prop_id=$($CHAIN_BINARY q tx $txhash -o json --home $whale_home | jq -r '.events[] | select(.type=="submit_proposal") | .attributes[] | select(.key == "proposal_id") | .value')
      #         echo "> Proposal ID: $prop_id"
      #         $CHAIN_BINARY tx gov vote $prop_id yes --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y
      #         sleep $VOTING_PERIOD
      #         sleep $(($COMMIT_TIMEOUT+2))
              
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh
      #     - name: _API endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_api.sh localhost $whale_api
      #     - name: _RPC endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_rpc.sh localhost $whale_rpc

      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
                  
      #     - name: _Test counter contract
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_contract_counter.sh

      #     - name: _Test multisig contract
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_contract_multisig.sh

      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh
      #     - name: _API endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_api.sh localhost $whale_api
      #     - name: _RPC endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_rpc.sh localhost $whale_rpc
    
      # Test-10-feemarket:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3

      #     - name: Query consensus params
      #       run: |
      #         source scripts/vars.sh
      #         curl -s http://localhost:$whale_api/cosmos/consensus/v1/params | jq '.'
          
      #     - name: Query feemarket params
      #       run: |
      #         source scripts/vars.sh
      #         curl -s http://localhost:$whale_api/feemarket/v1/params | jq '.'          
      #     - name: _Test feemarket
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_feemarket.sh
  
      #     - name: Print consensus and feemarket params
      #       run: |
      #         source scripts/vars.sh  
      #         echo "> consensus params:"
      #         $CHAIN_BINARY q consensus params --home $whale_home -o json | jq '.'
      #         echo "> feemarket params:"
      #         $CHAIN_BINARY q feemarket params --home $whale_home -o json | jq '.'
  
    
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
  
      #     - name: _Test feemarket
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_feemarket.sh
  
      #     - name: Print consensus and feemarket params
      #       run: |
      #         source scripts/vars.sh
      #         echo "> consensus params:"
      #         $CHAIN_BINARY q consensus params --home $whale_home -o json | jq '.'
      #         echo "> feemarket params:"
      #         $CHAIN_BINARY q feemarket params --home $whale_home -o json | jq '.'
      #     - name: Change consensus and feemarket params
      #       run: |
      #         source scripts/vars.sh
      #         txhash=$($CHAIN_BINARY tx gov submit-proposal templates/proposal-consensus-feemarket-params.json --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y -o json | jq -r '.txhash')
      #         echo "tx hash: $txhash"
      #         sleep $(($COMMIT_TIMEOUT+2))
      #         prop_id=$($CHAIN_BINARY q tx $txhash -o json --home $whale_home | jq -r '.events[] | select(.type=="submit_proposal") | .attributes[] | select(.key == "proposal_id") | .value')
      #         echo "> Proposal ID: $prop_id"
      #         $CHAIN_BINARY tx gov vote $prop_id yes --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y
      #         sleep $VOTING_PERIOD
      #         sleep $(($COMMIT_TIMEOUT+2))
      #     - name: Print consensus and feemarket params
      #       run: |
      #         source scripts/vars.sh
      #         echo "> consensus params:"
      #         $CHAIN_BINARY q consensus params --home $whale_home -o json | jq '.'
      #         echo "> feemarket params:"
      #         $CHAIN_BINARY q feemarket params --home $whale_home -o json | jq '.'
  
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh
      #     - name: _API endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_api.sh localhost $whale_api
      #     - name: _RPC endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_rpc.sh localhost $whale_rpc
  
      Test-11-ics-sovereign-reuse-connection:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          # Consumer chain variables
          RECIPIENT: cosmos1r5v5srda7xfth3hn2s26txvrcrntldjumt8mhl
          CONSUMER_ICS: v6.3.0
          PROVIDER_ICS: v6.4.0
          TOPN: 0
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep 5
              tail -n 100 $log_prefix$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3
    
          - name: Start sovereign chain
            run: |
              source scripts/vars_sovereign.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep 5
              tail -n 100 $log_prefix$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3
          - name: Create transfer channel with sovereign chain
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              sed -i -e "s|ccv_consumer_chain = true|ccv_consumer_chain = false|g" ~/.hermes/config.toml
              sleep 30s
              hermes create connection --a-chain $CHAIN_ID --b-chain $CONSUMER_CHAIN_ID
              hermes create channel --a-chain $CHAIN_ID --a-connection connection-0 --a-port transfer --b-port transfer 
    
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5

          - name: List sovereign chain channels
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              $CONSUMER_CHAIN_BINARY q ibc channel channels --node $consumer_whale_rpc
    
          - name: Restart relayer
            run: sudo systemctl restart $RELAYER

          - name: Add changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              scripts/add_consumer.sh

          - name: Opt in to changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              scripts/consumer_opt_in.sh

          - name: Sovereign chain changeover upgrade
            run: |
              source scripts/vars_sovereign.sh
              export DOWNLOAD_URL=$CONSUMER_CHAIN_BINARY_URL
              scripts/upgrade_changeover.sh
    
          - name: Spawn changeover chain ICS v6.4.0
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              scripts/spawn_changeover.sh

          - name: Start changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh   
              source scripts/vars_changeover.sh
              ./$STOP_SCRIPT
              wget $CONSUMER_CHAIN_BINARY_URL -O $CONSUMER_CHAIN_BINARY -q
              chmod +x $CONSUMER_CHAIN_BINARY
              $CONSUMER_CHAIN_BINARY version --long
              ./$START_SCRIPT
              sleep 10
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

          - name: _Post-changeover consumer chain produces blocks> ICS v6.4.0
            run: |
              source scripts/vars.sh 
              source scripts/vars_changeover.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 10
          - name: Establish CCV channel for changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh 
              sudo systemctl stop $RELAYER
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              sudo systemctl start $RELAYER
              sleep 10
          - name: _Changeover CCV channel verified> ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id
    
          
          # - name: Trigger consumer rewards distribution> ICS v6.4.0
          #   env:
          #     CONSUMER_HOME_1: /home/runner/.v640-1-1
          #     CON1_RPC_PORT: 64121
          #     CON1_P2P_PORT: 64131
          #   run: |
          #     export CONSUMER_CHAIN_BINARY=$CHANGEOVER_CHAIN_V640_BINARY
          #     echo "> Consumer rewards pool balances:"
          #     $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
          #     echo "> Val1 outstanding rewards:"
          #     $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'
          #     echo "> Send tx with high fees in consumer chain."
          #     $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
          #     --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
          #     --gas auto --fees 10000ucon \
          #     --home $CONSUMER_HOME_1 -o json -y | jq '.'
          #     sleep $(($COMMIT_TIMEOUT*10))
          #     echo "> Balance in consumer chain recipient:"
          #     $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $CONSUMER_HOME_1 -o json | jq '.'
          #     echo "> Val1 outstanding rewards:"
          #     $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'

          # - name: Register consumer reward denoms
          #   env:
          #     CONSUMER_DENOM: ucon
          #   run: |
          #     last_channel=$($CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.channels[-1].channel_id')
          #     echo "> Last channel: $last_channel"
          #     denom_640=$(echo -n "transfer/${last_channel}/$CONSUMER_DENOM" | shasum -a 256 | cut -d ' ' -f1 | tr 'a-z' 'A-Z')
          #     echo "> Denom: $denom_640"
          #     scripts/change_denoms.sh $denom_640
          #     $CHAIN_BINARY q provider registered-consumer-reward-denoms --home $HOME_1 -o json | jq '.'

          # - name: _Consumer rewards distribution> ICS v6.4.0
          #   run: |
          #     last_channel=$($CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.channels[-1].channel_id')
          #     ibc_denom=ibc/$(echo -n "transfer/${last_channel}/$CONSUMER_DENOM" | shasum -a 256 | cut -d ' ' -f1 | tr 'a-z' 'A-Z')
          #     echo "> Denom: $ibc_denom"
          #     echo "> Consumer rewards pool balances:"
          #     $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
          #     echo "> Val1 outstanding rewards:"
          #     $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'
          #     val1_rewards=$(curl -s http://localhost:$VAL1_API_PORT/cosmos/distribution/v1beta1/validators/$VALOPER_1/outstanding_rewards | jq -r '.rewards.rewards')
          #     echo "> val1_rewards: $val1_rewards"
          #     val1_consumer_rewards=$(echo $val1_rewards | jq -r --arg DENOM "$ibc_denom" '.[] | select(.denom==$DENOM).amount')
          #     echo "> val1_consumer_rewards: $val1_consumer_rewards"
          #     if [ -z "$val1_consumer_rewards" ]; then
          #       echo "FAIL: No consumer rewards distributed to val1."
          #       exit 1
          #     else
          #       echo "PASS: Consumer rewards distributed to val1."
          #     fi

      # Test-12-ics-sovereign-new-connection:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     # Consumer chain variables
      #     RECIPIENT: cosmos1r5v5srda7xfth3hn2s26txvrcrntldjumt8mhl
      #     CONSUMER_ICS: v6.3.0
      #     PROVIDER_ICS: v6.3.0
      #     # Reference ICS chain variables
      #     CONSUMER_DENOM: ucon
      #     CONSUMER_FEES: 500
      #     ICS_TRANSFORM_BINARY: cd-transform
      #   steps:
      #     - name: start-version
      #       run: echo ${{matrix.gaia_version}}
      #     - name: target-version
      #       run: echo ${{matrix.upgrade_version}}
      #     - name: target-commit
      #       if: ${{ matrix.upgrade_version == 'main' }}
      #       run: |
      #         BUILD_TAG=gaiad-linux-${{matrix.upgrade_version}}
      #         TARGET_COMMIT=$(curl -s -L -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/hyphacoop/cosmos-builds/releases/tags/$BUILD_TAG | jq -r '.name')
      #         echo TARGET_COMMIT: $TARGET_COMMIT
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli

      #     - name: Set up relayer
      #       run: scripts/setup_relayer.sh

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #         scripts/wait_for_block.sh $whale_rpc 3
    
      #     - name: Start sovereign chain
      #       env:
      #         CONSUMER_CHAIN_ID: v640-one
      #         CONSUMER_HOME_1: /home/runner/.v640-1-1
      #         CONSUMER_HOME_2: /home/runner/.v640-1-2
      #         CONSUMER_HOME_3: /home/runner/.v640-1-3
      #         CONSUMER_SERVICE_1: v640-1-1.service
      #         CONSUMER_SERVICE_2: v640-1-2.service
      #         CONSUMER_SERVICE_3: v640-1-3.service
      #         CON1_API_PORT: 64101
      #         CON2_API_PORT: 64102
      #         CON3_API_PORT: 64103
      #         CON1_GRPC_PORT: 64111
      #         CON2_GRPC_PORT: 64112
      #         CON3_GRPC_PORT: 64113
      #         CON1_RPC_PORT: 64121
      #         CON2_RPC_PORT: 64122
      #         CON3_RPC_PORT: 64123
      #         CON1_P2P_PORT: 64131
      #         CON2_P2P_PORT: 64132
      #         CON3_P2P_PORT: 64133
      #         CON1_PPROF_PORT: 64141
      #         CON2_PPROF_PORT: 64142
      #         CON3_PPROF_PORT: 64143
      #         DOWNTIME_BLOCKS: 100000
      #       run: |
      #         export CHAIN_BINARY_URL=$SOVEREIGN_CHAIN_V640_BINARY_URL
      #         export CONSUMER_CHAIN_BINARY=$SOVEREIGN_CHAIN_V640_BINARY
      #         scripts/start_sovereign_chain_v50.sh
      #         sleep 10
      #     - name: Print sovereign logs
      #       env:
      #         CONSUMER_SERVICE_1: v640-1-1.service
      #       run: 
      #         journalctl -u $CONSUMER_SERVICE_1
      #     - name: Sovereign block production check
      #       env:
      #         CON1_RPC_PORT: 64121
      #       run: tests/test_block_production.sh 127.0.0.1 $CON1_RPC_PORT 5 # 5 blocks
      #     - name: Create transfer channel with sovereign chain
      #       env:
      #         CONSUMER_CHAIN_ID: v640-one
      #       run: |
      #         sed -i -e "s\ccv_consumer_chain = true\ccv_consumer_chain = false\g" ~/.hermes/config.toml
      #         hermes create connection --a-chain $CHAIN_ID --b-chain $CONSUMER_CHAIN_ID
      #         hermes create channel --a-chain $CHAIN_ID --a-connection connection-0 --a-port transfer --b-port transfer

      #     # - name: Add consumer chain with ICS v4.0.0
      #     #   env:
      #     #     CONSUMER_CHAIN_ID: v400-one
      #     #     PSS_ENABLED: true
      #     #     COSMOS_SDK: v50
      #     #   run: |
      #     #     scripts/add_consumer_optin.sh
      #     # - name: Initialize consumer chain with ICS v4.0.0
      #     #   env:
      #     #     CONSUMER_CHAIN_ID: v400-one
      #     #     CONSUMER_HOME_1: /home/runner/.v400-1-1
      #     #     CONSUMER_HOME_2: /home/runner/.v400-1-2
      #     #     CONSUMER_HOME_3: /home/runner/.v400-1-3
      #     #     CONSUMER_SERVICE_1: v400-1-1.service
      #     #     CONSUMER_SERVICE_2: v400-1-2.service
      #     #     CONSUMER_SERVICE_3: v400-1-3.service
      #     #     CON1_API_PORT: 40101
      #     #     CON2_API_PORT: 40102
      #     #     CON3_API_PORT: 40103
      #     #     CON1_GRPC_PORT: 40111
      #     #     CON2_GRPC_PORT: 40112
      #     #     CON3_GRPC_PORT: 40113
      #     #     CON1_RPC_PORT: 40121
      #     #     CON2_RPC_PORT: 40122
      #     #     CON3_RPC_PORT: 40123
      #     #     CON1_P2P_PORT: 40131
      #     #     CON2_P2P_PORT: 40132
      #     #     CON3_P2P_PORT: 40133
      #     #     CON1_PPROF_PORT: 40141
      #     #     CON2_PPROF_PORT: 40142
      #     #     CON3_PPROF_PORT: 40143
      #     #     DOWNTIME_BLOCKS: 100000
      #     #   run: |
      #     #     export CONSUMER_CHAIN_BINARY=$CONSUMER_CHAIN_V400_BINARY
      #     #     scripts/init_consumer_permissionless.sh
      #     #     sleep 20
      #     # - name: Prepare consumer chain v400-one
      #     #   env:
      #     #     CONSUMER_CHAIN_ID: v400-one
      #     #     CONSUMER_HOME_1: /home/runner/.v400-1-1
      #     #     CONSUMER_HOME_2: /home/runner/.v400-1-2
      #     #     CONSUMER_HOME_3: /home/runner/.v400-1-3
      #     #     ICS_400: true
      #     #     CONSUMER_ICS: v4.1.1
      #     #     PROVIDER_ICS: v4.2.0
      #     #   run: |
      #     #     export CONSUMER_CHAIN_BINARY=$CONSUMER_CHAIN_V400_BINARY
      #     #     scripts/prepare_consumer_permissionless.sh
      #     # - name: Start consumer chain v400-one
      #     #   env:
      #     #     CONSUMER_CHAIN_ID: v400-one
      #     #     CONSUMER_SERVICE_1: v400-1-1.service
      #     #     CONSUMER_SERVICE_2: v400-1-2.service
      #     #     CONSUMER_SERVICE_3: v400-1-3.service
      #     #   run: |
      #     #     sudo systemctl enable $CONSUMER_SERVICE_1 --now
      #     #     sleep 5
      #     #     journalctl -u $CONSUMER_SERVICE_1
      #     # - name: _Pre-upgrade consumer chain produces blocks> ICS v4.0.0 chain 1
      #     #   env:
      #     #     CON1_RPC_PORT: 40121
      #     #   run: tests/test_block_production.sh 127.0.0.1 $CON1_RPC_PORT 5
      #     # - name: Establish CCV channel for v400-one
      #     #   env:
      #     #     CONSUMER_CHAIN_ID: v400-one
      #     #   run: |
      #     #     client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $HOME_1 | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #     #     if [ $RELAYER == "hermes" ]; then
      #     #       echo "Creating channel with Hermes..."
      #     #       hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
      #     #       hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
      #     #     elif [ $RELAYER == "rly" ]; then
      #     #       echo "Creating channel with Go relayer..."
      #     #       jq --arg CHAIN "$CONSUMER_CHAIN_ID" '.src."chain-id" = $CHAIN' templates/rly-path-template.json > v400-1.json
      #     #       jq --arg CLIENT "$client_id" '.dst."client-id" = $CLIENT' v400-1.json > v400-2.json
      #     #       rly paths add $CHAIN_ID $CONSUMER_CHAIN_ID v400-1 --file v400-2.json
      #     #       rly transact connection v400-1
      #     #       rly transact channel v400-1 --src-port consumer --dst-port provider --order ordered --version 1
      #     #     fi
      #     #     sudo systemctl restart $RELAYER
      #     #     sleep 10
      #     # - name: _Pre-upgrade CCV channel verified> ICS v4.0.0 chain 1
      #     #   env:
      #     #     CONSUMER_HOME_1: /home/runner/.v400-1-1
      #     #     CON1_RPC_PORT: 40121
      #     #   run: tests/test_ccv_key_assignment.sh
      #     # - name: _Pre-upgrade IBC transfer successful> ICS v4.0.0 chain 1
      #     #   env:
      #     #     CONSUMER_CHAIN_ID: v400-one
      #     #     CONSUMER_HOME_1: /home/runner/.v400-1-1
      #     #     RECIPIENT: consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc
      #     #   run: |
      #     #     export CONSUMER_CHAIN_BINARY=$CONSUMER_CHAIN_V400_BINARY
      #     #     client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $HOME_1 | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #     #     connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $HOME_1 | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #     #     channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $HOME_1 | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #     #     tests/test_consumer_ibc_transfer.sh $channel_id
    
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: "${{ matrix.target_version }}"
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         scripts/software_upgrade.sh 127.0.0.1 $VAL1_RPC_PORT ${{ matrix.upgrade_name }}    
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         tests/test_block_production.sh 127.0.0.1 $VAL1_RPC_PORT 10
    
      #     - name: Restart relayer
      #       run: sudo systemctl restart $RELAYER

      #     - name: Sovereign-consumer changeover
      #       env:
      #         CONSUMER_CHAIN_ID: v640-one
      #         CONSUMER_HOME_1: /home/runner/.v640-1-1
      #         CONSUMER_HOME_2: /home/runner/.v640-1-2
      #         CONSUMER_HOME_3: /home/runner/.v640-1-3
      #         CONSUMER_SERVICE_1: v640-1-1.service
      #         CONSUMER_SERVICE_2: v640-1-2.service
      #         CONSUMER_SERVICE_3: v640-1-3.service
      #         CON1_API_PORT: 64101
      #         CON2_API_PORT: 64102
      #         CON3_API_PORT: 64103
      #         CON1_GRPC_PORT: 64111
      #         CON2_GRPC_PORT: 64112
      #         CON3_GRPC_PORT: 64113
      #         CON1_RPC_PORT: 64121
      #         CON2_RPC_PORT: 64122
      #         CON3_RPC_PORT: 64123
      #         CON1_P2P_PORT: 64131
      #         CON2_P2P_PORT: 64132
      #         CON3_P2P_PORT: 64133
      #         CON1_PPROF_PORT: 64141
      #         CON2_PPROF_PORT: 64142
      #         CON3_PPROF_PORT: 64143
      #       run: |
      #         export CONSUMER_CHAIN_BINARY=$SOVEREIGN_CHAIN_V640_BINARY
      #         export CHANGEOVER_BINARY=$CHANGEOVER_CHAIN_V640_BINARY
      #         scripts/changeover_v6.4.0_new_connection.sh
      #         sleep 60
      #         journalctl -u $CONSUMER_SERVICE_1 | tail -n 100

    
      #     - name: Establish CCV channel for v640-one
      #       env:
      #         CONSUMER_CHAIN_ID: v640-one
      #       run: |
      #         sed -i -e "s\ccv_consumer_chain = false\ccv_consumer_chain = true\g" ~/.hermes/config.toml
      #         echo "> Hermes config:"
      #         cat ~/.hermes/config.toml
      #         client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $HOME_1 | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         echo "> Client ID: $client_id"
      #         sudo systemctl stop $RELAYER
      #         if [ $RELAYER == "hermes" ]; then
      #           echo "Creating channel with Hermes..."
      #           hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-1 --b-client $client_id
      #           hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-1 --channel-version 1
      #         elif [ $RELAYER == "rly" ]; then
      #           echo "Creating channel with Go relayer..."
      #           jq --arg CHAIN "$CONSUMER_CHAIN_ID" '.src."chain-id" = $CHAIN' templates/rly-path-template.json > v640-1.json
      #           jq --arg CLIENT "$client_id" '.dst."client-id" = $CLIENT' v640-1.json > v640-2.json
      #           rly paths add $CHAIN_ID $CONSUMER_CHAIN_ID v640-1 --file v640-2.json
      #           rly transact connection v640-1
      #           rly transact channel v640-1 --src-port consumer --dst-port provider --order ordered --version 1
      #         fi
      #         sudo systemctl restart $RELAYER
      #         sleep 10
      #     - name: _CCV channel verified> ICS v6.4.0 chain 1
      #       env:
      #         CONSUMER_HOME_1: /home/runner/.v640-1-1
      #         CON1_RPC_PORT: 64121
      #         CON1_P2P_PORT: 64131
      #       run: tests/test_ccv_key_assignment.sh
      #     - name: _IBC transfer successful> ICS v6.4.0 chain 1
      #       env:
      #         CONSUMER_CHAIN_ID: v640-one
      #         CONSUMER_HOME_1: /home/runner/.v640-1-1
      #         RECIPIENT: consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc
      #       run: |
      #         export CONSUMER_CHAIN_BINARY=$CHANGEOVER_CHAIN_V640_BINARY
      #         # echo "> List consumer chains:"
      #         # $CHAIN_BINARY q provider list-consumer-chains -o json --home $HOME_1 | jq '.'
      #         # client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $HOME_1 | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
      #         # echo "> Client ID: $client_id"
      #         # connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $HOME_1 | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
      #         # echo "> Connection ID: $connection_id"
      #         # channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $HOME_1 | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
      #         tests/test_changeover_ibc_transfer.sh
          
      #     - name: Trigger consumer rewards distribution> ICS v6.4.0
      #       env:
      #         CONSUMER_HOME_1: /home/runner/.v640-1-1
      #         CON1_RPC_PORT: 64121
      #         CON1_P2P_PORT: 64131
      #       run: |
      #         export CONSUMER_CHAIN_BINARY=$CHANGEOVER_CHAIN_V640_BINARY
      #         echo "> Consumer rewards pool balances:"
      #         $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
      #         echo "> Val1 outstanding rewards:"
      #         $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'
      #         echo "> Send tx with high fees in consumer chain."
      #         $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
      #         --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
      #         --gas auto --fees 10000ucon \
      #         --home $CONSUMER_HOME_1 -o json -y | jq '.'
      #         sleep $(($COMMIT_TIMEOUT*10))
      #         echo "> Balance in consumer chain recipient:"
      #         $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $CONSUMER_HOME_1 -o json | jq '.'
      #         echo "> Val1 outstanding rewards:"
      #         $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'

      #     - name: Register consumer reward denoms
      #       env:
      #         CONSUMER_DENOM: ucon
      #       run: |
      #         last_channel=$($CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.channels[-1].channel_id')
      #         echo "> Last channel: $last_channel"
      #         denom_640=$(echo -n "transfer/${last_channel}/$CONSUMER_DENOM" | shasum -a 256 | cut -d ' ' -f1 | tr 'a-z' 'A-Z')
      #         echo "> Denom: $denom_640"
      #         scripts/change_denoms.sh $denom_640
      #         $CHAIN_BINARY q provider registered-consumer-reward-denoms --home $HOME_1 -o json | jq '.'

      #     - name: _Consumer rewards distribution> ICS v6.4.0
      #       run: |
      #         last_channel=$($CHAIN_BINARY q ibc channel channels -o json --home $HOME_1 | jq -r '.channels[-1].channel_id')
      #         ibc_denom=ibc/$(echo -n "transfer/${last_channel}/$CONSUMER_DENOM" | shasum -a 256 | cut -d ' ' -f1 | tr 'a-z' 'A-Z')
      #         echo "> Denom: $ibc_denom"
      #         echo "> Consumer rewards pool balances:"
      #         $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $HOME_1 -o json | jq '.'
      #         echo "> Val1 outstanding rewards:"
      #         $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $HOME_1 -o json | jq '.'
      #         val1_rewards=$(curl -s http://localhost:$VAL1_API_PORT/cosmos/distribution/v1beta1/validators/$VALOPER_1/outstanding_rewards | jq -r '.rewards.rewards')
      #         echo "> val1_rewards: $val1_rewards"
      #         val1_consumer_rewards=$(echo $val1_rewards | jq -r --arg DENOM "$ibc_denom" '.[] | select(.denom==$DENOM).amount')
      #         echo "> val1_consumer_rewards: $val1_consumer_rewards"
      #         if [ -z "$val1_consumer_rewards" ]; then
      #           echo "FAIL: No consumer rewards distributed to val1."
      #           exit 1
      #         else
      #           echo "PASS: Consumer rewards distributed to val1."
      #         fi

      # Test-13-expedited-proposals:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     COSMOVISOR: false
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli

      #     - name: Start chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64    
      #         source scripts/vars.sh
      #         scripts/setup.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 log_$COUNT_WIDTH
      #     - name: Block production check
      #       run: |
      #         source scripts/vars.sh
      #         scripts/wait_for_block.sh $whale_rpc 3
            
      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
      #     - name: _Test expedited proposals
      #       run: |
      #         source ./scripts/vars.sh
      #         tests/test_expedited_proposals.sh

      # Test-14-key-management:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     GO_VERSION: 1.24.1
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli
      #     - name: Set up chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
          
      #     - name: Set up tmkms
      #       run: |
      #         source scripts/vars.sh
      #         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
      #         chmod +x rustup-init.sh
      #         ./rustup-init.sh -y
      #         cargo install tmkms --features=softsign
      #         tmkms init /home/runner/.kms
      #         tmkms init .kms       
      #         tmkms softsign keygen /home/runner/.kms/secrets/secret_connection_key
      #         cp $whale_home/config/priv_validator_key.json /home/runner/.kms/secrets/
      #         tmkms softsign import /home/runner/.kms/secrets/priv_validator_key.json /home/runner/.kms/secrets/priv_validator_key
      #         tmux new-session -d -s tmkms "tmkms start -c templates/tmkms-config.toml 2>&1 | tee tmkms.log"
      #         sleep 5
      #         tail -n 100 tmkms.log
      #     - name: Start chain with tmkms
      #       run: |
      #         source scripts/vars.sh
      #         echo "> Configure config.toml for tmkms"
      #         toml set --toml-path $whale_home/config/config.toml priv_validator_laddr "tcp://127.0.0.1:24001"
      #         sed -i -e "s/priv_validator_key_file/#priv_validator_key_file/" $whale_home/config/config.toml
      #         sed -i -e "s/priv_validator_key_file/#priv_validator_state_file/" $whale_home/config/config.toml
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 50 $whale_log
      #         echo "> Tmkms logs:"
      #         tail -n 50 tmkms.log
      #         scripts/wait_for_block.sh 3
          
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh

      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
                  
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh
      #     - name: _API endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_api.sh localhost $whale_api
      #     - name: _RPC endpoints check
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_endpoints_rpc.sh localhost $whale_rpc

      # Test-15-state-sync:
      #   runs-on: ubuntu-24.04
      #   needs: set-versions
      #   strategy:
      #     matrix:
      #       start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
      #       target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
      #       upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
      #     fail-fast: false
      #   env:
      #     BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
      #     GO_VERSION: 1.24.1
      #   steps:
      #     - name: Update PATH
      #       run: |
      #         mkdir -p $HOME/go/bin
      #         echo "$HOME/go/bin" >> $GITHUB_PATH
      #         echo "$HOME/.hermes" >> $GITHUB_PATH
      #         echo "$HOME/.relayer" >> $GITHUB_PATH
      #     - name: Bypass the grub-efi-amd64-signed package
      #       run: sudo apt-mark hold grub-efi-amd64-signed
      #     - name: Check out repository code
      #       uses: actions/checkout@v4
      #     - name: Set up Python
      #       uses: actions/setup-python@v5
      #       with:
      #         python-version: '3.10'
      #     - name: Install dependencies
      #       run: |
      #         python -m pip install --upgrade pip
      #         python -m pip install toml-cli
      #     - name: Set up chain
      #       run: |
      #         export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
      #         source scripts/vars.sh
      #         scripts/setup.sh
                        
      #     - name: Set up chain
      #       run: |
      #         source scripts/vars.sh
      #         export COMMIT_TIMEOUT=3
      #         ./$START_SCRIPT
      #         sleep 5
      #         tail -n 100 $whale_log
      #         scripts/wait_for_block.sh 3
          
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh

      #     - name: Test software upgrade
      #       env:
      #         TARGET_VERSION: ${{ matrix.target_version }}
      #         DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
      #       run: |
      #         source scripts/vars.sh
      #         scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
      #     - name: _Blocks produced after upgrade
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
                  
      #     - name: _Transactions verified> bank send, delegate, and withdraw rewards
      #       run: |
      #         source scripts/vars.sh
      #         tests/test_tx.sh

      #     - name: _State sync test
      #       run: |
      #         source scripts/vars.sh
      #         echo "> Sleeping $[ $COMMIT_TIMEOUT * $STATE_SYNC_SNAPSHOT_INTERVAL ] seconds for state sync to be ready"
      #         sleep $[ $COMMIT_TIMEOUT * $STATE_SYNC_SNAPSHOT_INTERVAL ]
      #         source scripts/vars_state_sync.sh
      #         scripts/setup_state_sync.sh
      #         ./$START_SCRIPT
      #         sleep 5
      #         tests/test_block_production.sh 127.0.0.1 ${rpc_prefix}999 5