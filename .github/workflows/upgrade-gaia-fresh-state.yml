---

    name: Gaia Upgrade - Fresh State
    on:
      workflow_dispatch:
        inputs:
          from_version:
            description: 'Gaia version to upgrade from'
            required: true
            type: string
            default: v25.0.0
          to_version:
            description: 'Gaia version to upgrade to'
            required: true
            default: v25.1.0
          upgrade_name:
            description: 'Name of the upgrade'
            required: false
            type: string
            default: v25.1.0
      push:
    
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    env:
      # All chain variables
      COMMIT_TIMEOUT: 2
      # Consumer chain variables
      RECIPIENT: cosmos1r5v5srda7xfth3hn2s26txvrcrntldjumt8mhl
      PROVIDER_ICS: v6.4.0
      TOPN: 0
      # Relayer variables
      RELAYER: hermes
      HERMES_VERSION: v1.13.2
      RLY_VERSION: "2.5.0"
    jobs:
      set-versions:
        env:
          START: ${{ github.event_name == 'push' && 'v25.0.0' || inputs.from_version }}
          TARGET: ${{ github.event_name == 'push' && 'v25.1.0' || inputs.to_version }}
          NAME: ${{ github.event_name == 'push' && 'v25.1.0' || inputs.upgrade_name }}
        runs-on: ubuntu-24.04
        steps:
          - name: Debug env vars
            run: |
              echo "START: $START"
              echo "TARGET: $TARGET"
              echo "NAME: $NAME"
              ldd --version
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install requests
          - name: Set starting version
            id: start
            run: |
              echo "version=$START" >> $GITHUB_OUTPUT
          - name: Set target version
            id: target
            run: |
              echo "version=$TARGET" >> $GITHUB_OUTPUT
          - name: Set upgrade name
            id: upgrade
            run: |
              echo "name=$NAME" >> $GITHUB_OUTPUT
          - name: Set binary source
            id: binary
            run: |
              if [[ "${TARGET:0:1}" != "v" ]]; then
                echo "source=BUILD" >> $GITHUB_OUTPUT
              else
                echo "source=DOWNLOAD" >> $GITHUB_OUTPUT
              fi
              
        outputs:
         start_version: ${{ steps.start.outputs.version }}
         target_version: ${{ steps.target.outputs.version }}
         upgrade_name: ${{ steps.upgrade.outputs.name }}
         binary_source: ${{ steps.binary.outputs.source }}

      Test-01-cosmovisor-upgrade:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
            cv_version: [v1.7.1]
            upgrade_mechanism: [cv_auto, cv_manual]
            enable_cosmovisor: [false, true]
            exclude:
              - target_version: main
                upgrade_mechanism: cv_auto
              - enable_cosmovisor: false
                upgrade_mechanism: cv_auto
          fail-fast: false
        env:
          COSMOVISOR: ${{ matrix.enable_cosmovisor }}
          COSMOVISOR_VERSION: ${{ matrix.cv_version }}
          UPGRADE_MECHANISM: ${{ matrix.upgrade_mechanism }}
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          GO_VERSION: 1.24.1
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Install Cosmovisor
            if: ${{ matrix.enable_cosmovisor == true }}
            run: |
              go install cosmossdk.io/tools/cosmovisor/cmd/cosmovisor@$COSMOVISOR_VERSION
          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 $whale_log
              scripts/wait_for_block.sh 3
          
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh

          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 ${rpc_prefix}$COUNT_WIDTH 5
                  
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh

          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost ${api_prefix}$COUNT_WIDTH
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost ${rpc_prefix}$COUNT_WIDTH
  
      Test-02-ics-optin:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          COMMIT_TIMEOUT: 3
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli

          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Add consumer chain with ICS v4.0.0
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              scripts/add_consumer.sh
          - name: Initialize consumer chain with ICS v4.0.0
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
              chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
              scripts/setup_consumer_legacy.sh
              sleep $(($COMMIT_TIMEOUT*4))
          - name: Spawn consumer chain v400-one
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh
              scripts/spawn_consumer.sh
          - name: Start consumer chain v400-one
            run: |
              source scripts/vars.sh 
              source scripts/vars_consumer_v400_one.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
          - name: _Pre-upgrade consumer chain produces blocks> ICS v4.0.0 chain 1
            run: |
              source scripts/vars_consumer_v400_one.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
          - name: Establish CCV channel for v400-one
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl restart $RELAYER
              # tmux send-keys -t relayer C-c
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*2))
          - name: _Pre-upgrade CCV channel verified> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              tests/test_ccv_channel.sh
              $CHAIN_BINARY q ibc channel channels -o json --home $whale_home | jq -r '.'
          - name: _Pre-upgrade IBC transfer successful> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: Add consumer chain with ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh
              scripts/add_consumer.sh
          - name: Initialize consumer chain with ICS v6.4.0  
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh
              wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
              chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
              scripts/setup_consumer.sh
              sleep $(($COMMIT_TIMEOUT*4))
          - name: Spawn consumer chain v640-one
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v640_one.sh
              scripts/spawn_consumer.sh
          - name: Start consumer chain v640-one
            run: |
              source scripts/vars.sh 
              source scripts/vars_consumer_v640_one.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
          - name: _Pre-upgrade consumer chain produces blocks> ICS v6.4.0 chain 1
            run: |
              source scripts/vars_consumer_v640_one.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
          - name: Establish CCV channel for v640-one
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v640_one.sh 
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Pre-upgrade CCV channel verified> ICS v6.4.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh  
              tests/test_ccv_channel.sh
          - name: _Pre-upgrade IBC transfer successful> ICS v6.4.0 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v640_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1
    
          - name: Add consumer chain with ICS v7.0.1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh
              scripts/add_consumer.sh
          - name: Initialize consumer chain with ICS v7.0.1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh
              wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
              chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
              scripts/setup_consumer.sh
              sleep $(($COMMIT_TIMEOUT*4))
          - name: Spawn consumer chain v701-one
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh
              scripts/spawn_consumer.sh
          - name: Start consumer chain v701-one
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
          - name: _Pre-upgrade consumer chain produces blocks> ICS v7.0.1 chain 1
            run: |
              source scripts/vars_consumer_v701_one.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

          - name: Establish CCV channel for v701-one
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh 
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Pre-upgrade CCV channel verified> ICS v7.0.1 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh  
              tests/test_ccv_channel.sh
              $CHAIN_BINARY q ibc channel channels -o json --home $whale_home | jq -r '.'
          - name: _Pre-upgrade IBC transfer successful> ICS v7.0.1 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1


          - name: Register consumer reward denoms
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              scripts/update_consumer_rewards.sh $channel_id

          - name: Trigger consumer rewards distribution> ICS v7.0.1 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Send tx with high fees in consumer chain."
              $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
              --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
              --gas auto --fees 1000000ucon \
              --home $consumer_whale_home -o json -y | jq '.'
              sleep $(($COMMIT_TIMEOUT*10))
              echo "> Balance in consumer chain recipient:"
              $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $consumer_whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Rewards pool:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'

          - name: _Consumer rewards distribution> ICS v7.0.1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              ibc_denom=ibc/$(echo -n transfer/$channel_id/$CONSUMER_DENOM | shasum -a 256 | cut -d ' ' -f1 | tr '[a-z]' '[A-Z]')
              echo "> Denom: $ibc_denom"
              echo "> Consumer rewards pool balances:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              val1_rewards=$(curl -s http://localhost:$whale_api/cosmos/distribution/v1beta1/validators/$VALOPER_1/outstanding_rewards | jq -r '.rewards.rewards')
              echo "> val1_rewards: $val1_rewards"
              val1_consumer_rewards=$(echo $val1_rewards | jq -r --arg DENOM "$ibc_denom" '.[] | select(.denom==$DENOM).amount')
              echo "> val1_consumer_rewards: $val1_consumer_rewards"
              if [ -z "$val1_consumer_rewards" ]; then
                echo "FAIL: No consumer rewards distributed to val1."
                exit 1
              else
                echo "PASS: Consumer rewards distributed to val1."
              fi

          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
          - name: Restart relayer
            run: |
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              scripts/start_relayer.sh

          - name: _CCV channel verified> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh  
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v4.0.0 chain 1 channel-1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh 
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: _CCV channel verified> ICS v6.4.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh  
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v6.4.0 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v640_one.sh 
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: _CCV channel verified> ICS v7.0.1 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh  
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v7.0.1 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: Add consumer chain with ICS v7.0.1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_two.sh
              scripts/add_consumer.sh
          - name: Initialize consumer chain with ICS v7.0.1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_two.sh
              wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
              chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
              scripts/setup_consumer.sh
              sleep $(($COMMIT_TIMEOUT*4))
          - name: Spawn consumer chain v701-two
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_two.sh
              scripts/spawn_consumer.sh
          - name: Start consumer chain v701-two
            run: |
              source scripts/vars.sh 
              source scripts/vars_consumer_v701_two.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
          - name: _Pre-upgrade consumer chain produces blocks> ICS v7.0.1 chain 2
            run: |
              source scripts/vars_consumer_v701_two.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

          - name: Establish CCV channel for v701-two
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_two.sh
              tmux send-keys -t relayer C-c
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl restart $RELAYER
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Pre-upgrade CCV channel verified> ICS v7.0.1 chain 2
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_two.sh
              tests/test_ccv_channel.sh
              $CHAIN_BINARY q ibc channel channels -o json --home $whale_home | jq -r '.'
          - name: _Pre-upgrade IBC transfer successful> ICS v7.0.1 chain 2
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_two.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1
          
          - name: _Downtime test> ICS v4.0.0
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              tests/test_consumer_downtime.sh
              
          - name: _Downtime test> ICS v7.0.1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_two.sh
              tests/test_consumer_downtime.sh
      
          - name: _Remove consumer chain> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              echo "Consumer chains:"
              $CHAIN_BINARY q provider list-consumer-chains --home $whale_home -o json | jq '.'
              consumer_id=$($CHAIN_BINARY q provider list-consumer-chains --home $whale_home -o json | jq --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).consumer_id')
              echo "Removing v400-one (consumer_id = $consumer_id):"
              txhash=$($CHAIN_BINARY tx provider remove-consumer $consumer_id -from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home -o json | jq -r '.txhash')
              sleep $(($COMMIT_TIMEOUT*2))
              $CHAIN_BINARY q tx $txhash -o json | jq '.'
              $CHAIN_BINARY q provider list-consumer-chains --home $whale_rpc -o json | jq '.'
              phase=$($CHAIN_BINARY q provider list-consumer-chains --home $whale_rpc -o json | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id == $chain).phase')
              if [[ "$phase" -eq "CONSUMER_PHASE_STOPPED" ]]; then
                echo "PASS: Consumer chain was stopped."
              else
                echo "FAIL: Consumer chain was not stopped."
                exit 1
              fi
              
          - name: _Test consumer equivocation
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              tests/test_consumer_equivocation_legacy.sh
          - name: _Test consumer light client attack
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              source scripts/vars_consumer_v400_lc.sh
              tests/test_consumer_light_client_legacy.sh

      Test-03-ics-topn:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          TOPN: 95
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli

          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start relayer
            run: scripts/start_relayer.sh

          - name: Add consumer chain with ICS v4.0.0 - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              scripts/add_consumer.sh
              # consumer_chain=$($CHAIN_BINARY q txs --query "create_consumer.consumer_chain_id='v400-one'" -o json --home $whale_home | jq -r '.txs[0].tx..msg[0].consumer_chain_id')
              scripts/consumer_set_gov_owner.sh
              scripts/consumer_set_topn.sh
          - name: Initialize consumer chain with ICS v4.0.0 - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
              chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
              scripts/setup_consumer_legacy.sh
              sleep $(($COMMIT_TIMEOUT*4))
          - name: Spawn consumer chain v400-one
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh
              scripts/spawn_consumer_topn.sh
          - name: Start consumer chain v400-one
            run: |
              source scripts/vars.sh 
              source scripts/vars_consumer_v400_one.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

          - name: _Pre-upgrade consumer chain produces blocks> ICS v4.0.0 chain 1
            run: |
              source scripts/vars_consumer_v400_one.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
          - name: Establish CCV channel for v400-one
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh 
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Pre-upgrade CCV channel verified> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh  
              tests/test_ccv_channel.sh
          - name: _Pre-upgrade IBC transfer successful> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1
          
          - name: Test software upgrade
            env:
              TARGET_VERSION: "${{ matrix.target_version }}"
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}

          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
          - name: Restart relayer
            run: |
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              scripts/start_relayer.sh
    
          - name: _CCV channel verified> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh  
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1
              
          - name: Set Top N to 0 for ICS v4.0.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh
              export TOPN=0
              scripts/consumer_set_topn.sh

          - name: Opt out from top n-1 validators 
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v400_one.sh
              $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home
              scripts/consumer_opt_out.sh
              $CHAIN_BINARY q comet-validator-set --home $whale_home
              $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home

          - name: _Consumer chain produces blocks after top N = 0> ICS v4.0.0 chain 1
            run: |
              source scripts/vars_consumer_v400_one.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

          - name: _IBC transfer successful> ICS v4.0.0 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v400_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: Add consumer chain with ICS v6.4.0 - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh
              scripts/add_consumer.sh
              scripts/consumer_set_gov_owner.sh
              scripts/consumer_set_topn.sh

          - name: Initialize consumer chain with ICS v6.4.0 - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh
              wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
              chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
              scripts/setup_consumer.sh
              sleep $(($COMMIT_TIMEOUT*4))

          - name: Spawn consumer chain v640-one
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v640_one.sh
              scripts/spawn_consumer_topn.sh

          - name: Start consumer chain v640-one
            run: |
              source scripts/vars.sh 
              source scripts/vars_consumer_v640_one.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

          - name: _Consumer chain produces blocks> ICS v6.4.0 chain 1
            run: |
              source scripts/vars_consumer_v640_one.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
          - name: Establish CCV channel for v640-one
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh 
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _CCV channel verified> ICS v6.4.0 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v640_one.sh  
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v6.4.0 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v640_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: Add consumer chain with ICS v7.0.1 - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh
              scripts/add_consumer.sh
              scripts/consumer_set_gov_owner.sh
              scripts/consumer_set_topn.sh

          - name: Initialize consumer chain with ICS v7.0.1 - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh
              wget $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY -q
              chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
              scripts/setup_consumer.sh
              sleep $(($COMMIT_TIMEOUT*4))

          - name: Spawn consumer chain v640-one
            env:
              PROVIDER_ICS: v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh
              scripts/spawn_consumer_topn.sh

          - name: Start consumer chain v701-one
            run: |
              source scripts/vars.sh 
              source scripts/vars_consumer_v701_one.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

          - name: _Consumer chain produces blocks> ICS v7.0.1 chain 1
            run: |
              source scripts/vars_consumer_v701_one.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5
          - name: Establish CCV channel for v640-one
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh 
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _CCV channel verified> ICS v7.0.1 chain 1
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_v701_one.sh  
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v7.0.1 chain 1
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_v701_one.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1           
          - name: Query consumer chains
            run: |
              source scripts/vars.sh  
              $CHAIN_BINARY q provider list-consumer-chains --home $whale_home
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh
          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost $whale_api
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost $whale_rpc
  
      Test-04-pfm:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          
          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start relayer
            run: scripts/start_relayer.sh

          - name: Start pfm1 chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars_pfm_1.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start pfm2 chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars_pfm_2.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start pfm3 chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars_pfm_3.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Create transfer channels for PFM test
            run: |
              source scripts/vars.sh
              tmux send-keys -t relayer C-c
              if [ $RELAYER == "hermes" ]; then
                echo "Creating channels with Hermes..."
                hermes create channel --new-client-connection --a-chain $CHAIN_ID --b-chain pfm1 --a-port transfer --b-port transfer --yes
                hermes create channel --new-client-connection --a-chain pfm1 --b-chain pfm2 --a-port transfer --b-port transfer --yes
                hermes create channel --new-client-connection --a-chain pfm2 --b-chain pfm3 --a-port transfer --b-port transfer --yes
              elif [ $RELAYER == "rly" ]; then
                echo "Creating channel with Go relayer..."
                echo "Paths"
                rly paths new testnet pfm1 pfm-path-1
                rly paths new pfm1 pfm2 pfm-path-2
                rly paths new pfm2 pfm3 pfm-path-3
                echo "Clients"
                rly transact client testnet pfm1 pfm-path-1
                rly transact client pfm1 pfm2 pfm-path-2
                rly transact client pfm2 pfm3 pfm-path-3
                sleep $(($COMMIT_TIMEOUT*2))
                echo "Connections"
                rly transact connection pfm-path-1
                rly transact connection pfm-path-2
                rly transact connection pfm-path-3
                sleep $(($COMMIT_TIMEOUT*2))
                echo "Channels"
                rly transact channel pfm-path-1
                rly transact channel pfm-path-2
                rly transact channel pfm-path-3
              fi
              # sudo systemctl restart $RELAYER
              # $CHAIN_BINARY q ibc connection connections --home /home/runner/.pfm1 -o json
              # $CHAIN_BINARY q ibc connection connections --home /home/runner/.pfm2 -o json
              # $CHAIN_BINARY q ibc connection connections --home /home/runner/.pfm3 -o json
              scripts/start_relayer.sh    
          - name: _Test PFM transfers
            run: |
              source scripts/vars_pfm_3.sh
              tests/test_pfm_transfers.sh
          - name: Test software upgrade
            env:
              TARGET_VERSION: "${{ matrix.target_version }}"
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}  
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5

          - name: Restart relayer
            run: |
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              scripts/start_relayer.sh

          - name: _Test PFM transfers
            env:
              PFM_HOME: /home/runner/.pfm3
            run: |
              tests/test_pfm_transfers.sh
    
      Test-05-liquid-staking:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start relayer
            run: scripts/start_relayer.sh

          - name: Set up happy path liquid accounts
            run: |
              source scripts/vars.sh
              scripts/lsm_account_setup.sh

          - name: Pre-upgrade x/liquid happy path
            run: |
              source scripts/vars.sh
              tests/test_liquid_happy_path.sh
    
          - name: Tokenize with upgrade_wallet
            run: |
              source scripts/vars.sh
              upgrade_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="upgrade_wallet").address')
              echo "> Delegating."
              $CHAIN_BINARY tx staking delegate $VALOPER_1 1000000uatom --from upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home
              sleep $(($COMMIT_TIMEOUT+2))
              echo "> Tokenizing."
              echo "> Command: $CHAIN_BINARY tx liquid tokenize-share $VALOPER_1 1000000$DENOM $upgrade_wallet --from upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home"
              $CHAIN_BINARY tx liquid tokenize-share $VALOPER_1 1000000$DENOM $upgrade_wallet --from upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home
              sleep $(($COMMIT_TIMEOUT+2))
              $CHAIN_BINARY q bank balances $upgrade_wallet --home $whale_home -o json | jq '.'
          
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
          - name: Redeem tokens with upgrade_wallet
            run: |
              source scripts/vars.sh
              upgrade_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="upgrade_wallet").address')
              $CHAIN_BINARY q bank balances $upgrade_wallet --home $whale_home -o json | jq '.'
              liquid_denom=$($CHAIN_BINARY q bank balances $upgrade_wallet --home $whale_home -o json | jq -r '.balances[-2].denom')
              $CHAIN_BINARY q staking delegations $upgrade-wallet --home $whale_home -o json | jq '.'
              echo "> Denom: $liquid_denom"
              echo "> Command: $CHAIN_BINARY tx liquid redeem-tokens 1000000$liquid_denom --from $whale_home -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home"
              $CHAIN_BINARY tx liquid redeem-tokens 1000000$liquid_denom --from $upgrade_wallet -o json --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y --home $whale_home
              sleep $(($COMMIT_TIMEOUT+2))
              $CHAIN_BINARY q bank balances $upgrade_wallet --home $whale_home -o json | jq '.'
              $CHAIN_BINARY q staking delegations $upgrade_wallet --home $whale_home -o json | jq '.'
              delegation_amount=$($CHAIN_BINARY q staking delegations $upgrade_wallet --home $whale_home -o json | jq -r '.delegation_responses[0].balance.amount')
              echo "> Delegation_amount: $delegation_amount"
              if [[ "$delegation_amount" == "1000000" ]]; then
                  echo "Token redemption succeeded."
              else
                  echo "Token redemption failed."
                  exit 0
              fi

          - name: _Test x/liquid happy path
            run: |
              source scripts/vars.sh
              tests/test_liquid_happy_path.sh
    
      Test-06-mainnet-topn-consumer-chains:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          
          # Reference ICS chain variables
          TOPN: 95
          ICS_TRANSFORM_BINARY_URL: https://github.com/hyphacoop/cosmos-builds/releases/download/ics-v3.3.0-transform/interchain-security-cd
          ICS_TRANSFORM_BINARY: cd-transform
          STRIDE_WALLET_1: stride1r5v5srda7xfth3hn2s26txvrcrntldjucq88rn
          STRIDE_WALLET_LIQUID: stride17n3vkvg6lwf98p3kanlhlyjk6zkrfla9zrhma6
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh
          
          - name: Install Stride binary
            run: |
              source scripts/vars_consumer_stride.sh
              go version
              git clone https://github.com/Stride-Labs/stride.git 
              cd stride
              git checkout $STRIDE_VERSION
              make install
              
          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start relayer
            run: scripts/start_relayer.sh

          - name: Add Stride chain - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_stride.sh
              scripts/add_consumer.sh
              scripts/consumer_set_gov_owner.sh
              scripts/consumer_set_topn.sh
          - name: Initialize consumer chain stride-test - top N
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_stride.sh
              scripts/setup_consumer.sh
              sleep $(($COMMIT_TIMEOUT*4))
          - name: Spawn consumer chain stride-test
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_stride.sh
              scripts/spawn_consumer_topn.sh
          - name: Start consumer chain stride-test
            run: |
              source scripts/vars.sh 
              source scripts/vars_consumer_stride.sh
              ./start-$CONSUMER_CHAIN_ID.sh
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH
          - name: Establish CCV channel for stride-test
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_stride.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-0 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Pre-upgrade CCV channel verified> Stride
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_stride.sh
              tests/test_ccv_channel.sh
              $CHAIN_BINARY q ibc channel channels -o json --home $whale_home | jq -r '.'
          - name: _Pre-upgrade IBC transfer successful> Stride
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_stride.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
          - name: Restart relayer
            run: |
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              scripts/start_relayer.sh
    
          - name: _CCV channel verified> stride-test
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_stride.sh  
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> stride-test
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_stride.sh 
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1

          - name: Set Top N to 0 for ICS v4.0.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_stride.sh
              export TOPN=0
              scripts/consumer_set_topn.sh

          - name: Opt out from top n-1 validators 
            run: |
              source scripts/vars.sh
              source scripts/vars_consumer_stride.sh
              $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home --node http://localhost:$consumer_whale_rpc
              scripts/consumer_opt_out.sh
              $CHAIN_BINARY q comet-validator-set --home $whale_home
              $CONSUMER_CHAIN_BINARY q tendermint-validator-set --home $consumer_whale_home --node http://localhost:$consumer_whale_rpc

          - name: _Consumer chain produces blocks after top N = 0> ICS v4.0.0
            run: |
              source scripts/vars_consumer_stride.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

          - name: _IBC transfer successful> ICS v4.0.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_consumer_stride.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              tests/test_consumer_ibc_transfer.sh $channel_id channel-1
    
      Test-07-vesting-liquid-staking:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          VESTING_AMOUNT: 110000000
          VESTING_DELEGATED_AMOUNT: 100000000
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Set up vesting account
            run: |
              source scripts/vars.sh
              echo "Creating vesting wallet..."
              $CHAIN_BINARY keys add vesting --home $whale_home
              vesting_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="vesting").address')
              start_time=$(date +%s)
              echo "start time: $start_time"
              end_time=$(date -d '10 minutes'  +%s)
              echo "end time: $end_time"
              $CHAIN_BINARY tx vesting create-vesting-account \
              $vesting_wallet $VESTING_AMOUNT$DENOM $end_time \
              --from $WALLET_1 --home $whale_home \
              --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y
              sleep 1m
    
              echo "Saving vesting times..."
              duration=$(echo "$end_time - $start_time" | bc -l)
              echo "duration: $duration"
              echo "vesting_start_time=$start_time" >> $GITHUB_ENV
              echo "vesting_end_time=$end_time" >> $GITHUB_ENV
              echo "vesting_duration=$duration" >> $GITHUB_ENV
    
          - name: Delegate with vesting wallet
            run: |
              source scripts/vars.sh
              vesting_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="vesting").address')
              $CHAIN_BINARY q bank spendable-balances $vesting_wallet --home $whale_home -o json | jq '.'
              echo "Delegating from vesting wallet..."
              $CHAIN_BINARY tx staking delegate $VALOPER_1 $VESTING_DELEGATED_AMOUNT$DENOM \
              --from $vesting_wallet --home $whale_home \
              --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y      
    
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
          - name: Tokenize with vesting wallet
            run: |
              source scripts/vars.sh
              vesting_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="vesting").address')
              $CHAIN_BINARY q staking delegations $vesting_wallet --home $whale_home -o json | jq '.'
  
              echo "vesting_start_time = $vesting_start_time"
              echo "vesting_end_time = $vesting_end_time"
              echo "vesting_duration = $vesting_duration"
    
              echo "Calculating vested delegation..."
              current_epoch=$(date +%s)
              echo "epoch: $current_epoch"
              elapsed_time=$(echo "$current_epoch - $vesting_start_time" | bc)
              echo "elapsed_time: $elapsed_time"
              vested_ratio=$(echo "$elapsed_time / $vesting_duration" | bc -l)
              echo "vested ratio: $vested_ratio"
              vested_amount=$(echo "($vested_ratio * $VESTING_DELEGATED_AMOUNT)/1" | bc)
              echo "vested amount: $vested_amount"
    
              txhash=$($CHAIN_BINARY tx liquid tokenize-share $VALOPER_1 100000$DENOM $vesting_wallet --from $vesting_wallet --home $whale_home --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json | jq -r '.txhash')
              echo "txhash: $txhash"
    
              sleep $COMMIT_TIMEOUT
              $CHAIN_BINARY q bank balances $vesting_wallet --home $whale_home -o json | jq -r '.balances[] | select(.denom == "cosmosvaloper1r5v5srda7xfth3hn2s26txvrcrntldju7lnwmv/1")'
              liquid_tokens=$($CHAIN_BINARY q bank balances $vesting_wallet --home $whale_home -o json | jq -r '.balances[] | select(.denom == "cosmosvaloper1r5v5srda7xfth3hn2s26txvrcrntldju7lnwmv/1").amount')
              echo "liquid tokens: $liquid_tokens"
              if [[ "$liquid_tokens" -gt "0" ]]; then
                echo "PASS: Greater than zero amount in liquid tokens balance."
              else
                echo "FAIL: No liquid tokens balance."
                exit 1
              fi

          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh
          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost $whale_api
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost $whale_rpc

      Test-08-ICA-controller:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          CHAIN_BINARY_SECONDARY: gaiad-ibc
          COMMIT_TIMEOUT: 1
          RELAYER: hermes
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start host chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars_ica.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3
          - name: Generate host connection
            env:
              CHAIN_1: testnet
              CHAIN_2: ica
            run: |
              hermes create client --host-chain $CHAIN_1 --reference-chain $CHAIN_2
              hermes create client --reference-chain $CHAIN_1 --host-chain $CHAIN_2
              hermes create connection --a-chain $CHAIN_1 --a-client 07-tendermint-0 --b-client 07-tendermint-0
              # sudo systemctl start $RELAYER
              scripts/start_relayer.sh
          - name: _Test ICA controller - register ICA with controller1
            run: |
              source scripts/vars.sh
              echo "> Registering ICA."
              $CHAIN_BINARY keys add controller1 --home $whale_home
              controller1=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller1").address')
              $CHAIN_BINARY tx bank send $WALLET_1 $controller1 100000000$DENOM --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
              sleep $(($COMMIT_TIMEOUT*2))
              echo "> Controller account balances:"
              $CHAIN_BINARY q bank balances $controller1 --home $whale_home
              echo "> Register controller"
              txhash=$($CHAIN_BINARY tx interchain-accounts controller register connection-0 --ordering ORDER_ORDERED --version "" --from $controller1 --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home | jq -r '.txhash')
              sleep $(($COMMIT_TIMEOUT*15))
              echo "txhash: $txhash"
              $CHAIN_BINARY q tx $txhash --home $whale_home -o json | jq '.'
              tail -n 100 relayer.log
              tail -n 100 $whale_log
              ica_address=$($CHAIN_BINARY q interchain-accounts controller interchain-account $controller1 connection-0 --home $whale_home -o json | jq -r '.address')
              echo "ICA address: $ica_address"
              echo "> Funding ICA."
              source scripts/vars_ica.sh
              $CHAIN_BINARY tx bank send $WALLET_1 $ica_address 100000000$DENOM --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
              sleep $(($COMMIT_TIMEOUT*3))

          - name: _Test ICA send
            run: |
              source scripts/vars.sh
              controller1=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller1").address')
              $CHAIN_BINARY keys add recipient1 --home $whale_home
              recipient_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="recipient1").address')
              tests/test_ica_send.sh $controller1 $recipient_wallet
      
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
          
          - name: Restart relayer
            run: |
              # sudo systemctl restart $RELAYER
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*10))
          - name: _Test ICA controller - register ICA with controller2
            env:
              CONTROLLER_HOME: /home/runner/.val1
              HOST_HOME: /home/runner/.host
            run: |
              source scripts/vars.sh
              echo "> Registering ICA."
              $CHAIN_BINARY keys add controller2 --home $whale_home
              controller2=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller2").address')
              $CHAIN_BINARY tx bank send $WALLET_1 $controller2 100000000$DENOM --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
              sleep $(($COMMIT_TIMEOUT*2))
              txhash=$($CHAIN_BINARY tx interchain-accounts controller register connection-0 --ordering ORDER_ORDERED --version "" --from $controller2 --gas auto --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home | jq -r '.txhash')
              sleep $(($COMMIT_TIMEOUT*10))
              echo "txhash: $txhash"
              $CHAIN_BINARY q tx $txhash --home $whale_home -o json | jq '.'
              journalctl -u hermes
              tail -n 100 $whale_log
              ica_address=$($CHAIN_BINARY q interchain-accounts controller interchain-account $controller2 connection-0 --home $whale_home -o json | jq -r '.address')
              echo "ICA address: $ica_address"
              echo "> Funding ICA."
              source scripts/vars_ica.sh
              $CHAIN_BINARY tx bank send $WALLET_1 $ica_address 100000000$DENOM --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE -y -o json --home $whale_home
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Test ICA send with post-upgrade account
            run: |
              source scripts/vars.sh
              controller2=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller2").address')
              $CHAIN_BINARY keys add recipient2 --home $whale_home
              recipient_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="recipient2").address')
              tests/test_ica_send.sh $controller2 $recipient_wallet
          - name: _Test ICA send with pre-upgrade account
            run: |
              source scripts/vars.sh
              controller1=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="controller1").address')
              $CHAIN_BINARY keys add recipient3 --home $whale_home
              recipient_wallet=$($CHAIN_BINARY keys list --home $whale_home --output json | jq -r '.[] | select(.name=="recipient3").address')
              tests/test_ica_send.sh $controller1 $recipient_wallet

          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh
          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost $whale_api
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost $whale_rpc
  
      Test-09-cosmwasm:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: _Test counter contract
            run: |
              source scripts/vars.sh
              tests/test_contract_counter.sh

          - name: _Test multisig contract
            run: |
              source scripts/vars.sh
              tests/test_contract_multisig.sh

          - name: Change consensus and feemarket params
            run: |
              source scripts/vars.sh  
              txhash=$($CHAIN_BINARY tx gov submit-proposal templates/proposal-consensus-feemarket-params.json --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y -o json | jq -r '.txhash')
              echo "tx hash: $txhash"
              sleep $(($COMMIT_TIMEOUT+2))
              prop_id=$($CHAIN_BINARY q tx $txhash -o json --home $whale_home | jq -r '.events[] | select(.type=="submit_proposal") | .attributes[] | select(.key == "proposal_id") | .value')
              echo "> Proposal ID: $prop_id"
              $CHAIN_BINARY tx gov vote $prop_id yes --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y
              sleep $VOTING_PERIOD
              sleep $(($COMMIT_TIMEOUT+2))
              
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh
          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost $whale_api
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost $whale_rpc

          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
                  
          - name: _Test counter contract
            run: |
              source scripts/vars.sh
              tests/test_contract_counter.sh

          - name: _Test multisig contract
            run: |
              source scripts/vars.sh
              tests/test_contract_multisig.sh

          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh
          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost $whale_api
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost $whale_rpc
    
      Test-10-feemarket:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          COMMIT_TIMEOUT: 3
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Query consensus params
            run: |
              source scripts/vars.sh
              curl -s http://localhost:$whale_api/cosmos/consensus/v1/params | jq '.'
          
          - name: Query feemarket params
            run: |
              source scripts/vars.sh
              curl -s http://localhost:$whale_api/feemarket/v1/params | jq '.'          
          - name: _Test feemarket
            run: |
              source scripts/vars.sh
              tests/test_feemarket.sh
  
          - name: Print consensus and feemarket params
            run: |
              source scripts/vars.sh  
              echo "> consensus params:"
              $CHAIN_BINARY q consensus params --home $whale_home -o json | jq '.'
              echo "> feemarket params:"
              $CHAIN_BINARY q feemarket params --home $whale_home -o json | jq '.'
  
    
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
  
          - name: _Test feemarket
            run: |
              source scripts/vars.sh
              tests/test_feemarket.sh
  
          - name: Print consensus and feemarket params
            run: |
              source scripts/vars.sh
              echo "> consensus params:"
              $CHAIN_BINARY q consensus params --home $whale_home -o json | jq '.'
              echo "> feemarket params:"
              $CHAIN_BINARY q feemarket params --home $whale_home -o json | jq '.'
          - name: Change consensus and feemarket params
            run: |
              source scripts/vars.sh
              txhash=$($CHAIN_BINARY tx gov submit-proposal templates/proposal-consensus-feemarket-params.json --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y -o json | jq -r '.txhash')
              echo "tx hash: $txhash"
              sleep $(($COMMIT_TIMEOUT+2))
              prop_id=$($CHAIN_BINARY q tx $txhash -o json --home $whale_home | jq -r '.events[] | select(.type=="submit_proposal") | .attributes[] | select(.key == "proposal_id") | .value')
              echo "> Proposal ID: $prop_id"
              $CHAIN_BINARY tx gov vote $prop_id yes --from $WALLET_1 --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --gas-prices $GAS_PRICE --home $whale_home -y
              sleep $VOTING_PERIOD
              sleep $(($COMMIT_TIMEOUT+2))
          - name: Print consensus and feemarket params
            run: |
              source scripts/vars.sh
              echo "> consensus params:"
              $CHAIN_BINARY q consensus params --home $whale_home -o json | jq '.'
              echo "> feemarket params:"
              $CHAIN_BINARY q feemarket params --home $whale_home -o json | jq '.'
  
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh
          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost $whale_api
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost $whale_rpc
  
      Test-11-ics-sovereign-reuse-connection:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 $log_prefix$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3
    
          - name: Start sovereign chain
            run: |
              source scripts/vars_sovereign.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 $log_prefix$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3
          - name: Create transfer channel with sovereign chain
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              sed -i -e "s|ccv_consumer_chain = true|ccv_consumer_chain = false|g" ~/.hermes/config.toml
              sleep $(($COMMIT_TIMEOUT*5))
              hermes create connection --a-chain $CHAIN_ID --b-chain $CONSUMER_CHAIN_ID
              hermes create channel --a-chain $CHAIN_ID --a-connection connection-0 --a-port transfer --b-port transfer 
    
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5

          - name: List sovereign chain channels
            run: |
              source scripts/vars_sovereign.sh
              $CHAIN_BINARY q ibc channel channels --node http://localhost:$whale_rpc
    
          - name: Start relayer
            run: scripts/start_relayer.sh

          - name: List sovereign chain channels
            run: |
              source scripts/vars_sovereign.sh
              $CHAIN_BINARY q ibc channel channels --node http://localhost:$whale_rpc
    
          - name: Add changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              scripts/add_consumer.sh

          - name: Opt in to changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              scripts/consumer_opt_in.sh

          - name: Sovereign chain changeover upgrade
            run: |
              source scripts/vars_sovereign.sh
              export DOWNLOAD_URL=$CONSUMER_CHAIN_BINARY_URL
              scripts/upgrade_changeover.sh
    
          - name: Spawn changeover chain ICS v6.4.0
            env:
              REUSE_CONNECTION: true
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              scripts/spawn_changeover.sh

          - name: Start changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh   
              source scripts/vars_changeover.sh
              ./$STOP_SCRIPT
              wget $CONSUMER_CHAIN_BINARY_URL -O $CONSUMER_CHAIN_BINARY -q
              chmod +x $CONSUMER_CHAIN_BINARY
              $CONSUMER_CHAIN_BINARY version --long
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

          - name: _Post-changeover consumer chain produces blocks> ICS v6.4.0
            run: |
              source scripts/vars.sh 
              source scripts/vars_changeover.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

          - name: List changeover chain channels
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              $CONSUMER_CHAIN_BINARY q ibc channel channels --node http://localhost:$consumer_whale_rpc
    
          - name: Establish CCV channel for changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh 
              # sudo systemctl stop $RELAYER
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
              # sudo systemctl start $RELAYER
              sed -i -e "s|ccv_consumer_chain = false|ccv_consumer_chain = true|g" ~/.hermes/config.toml
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Changeover CCV channel verified> ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              # channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              # consumer_channel_id=$($CONSUMER_CHAIN_BINARY q ibc channel connections $connection_id -o json --home $consumer_whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              channel_id="channel-0"
              consumer_channel_id="channel-0"
              echo "> Provider channel: $channel_id, consumer channel: $consumer_channel_id"
              tests/test_consumer_ibc_transfer.sh $channel_id $consumer_channel_id
    
          
          - name: Trigger consumer rewards distribution> ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Send tx with high fees in consumer chain."
              $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
              --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
              --gas auto --fees 1000000ucon \
              --home $consumer_whale_home -o json -y | jq '.'
              sleep $(($COMMIT_TIMEOUT*10))
              echo "> Balance in consumer chain recipient:"
              $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $consumer_whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Rewards pool:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'

          - name: Register consumer reward denoms
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              scripts/update_consumer_rewards.sh channel-0              
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              
          - name: Trigger consumer rewards distribution> ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Send tx with high fees in consumer chain."
              $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
              --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
              --gas auto --fees 1000000ucon \
              --home $consumer_whale_home -o json -y | jq '.'
              sleep $(($COMMIT_TIMEOUT*10))
              echo "> Balance in consumer chain recipient:"
              $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $consumer_whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Rewards pool:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'

          - name: _Consumer rewards distribution> ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              ibc_denom=ibc/$(echo -n transfer/channel-0/$CONSUMER_DENOM | shasum -a 256 | cut -d ' ' -f1 | tr '[a-z]' '[A-Z]')
              echo "> Denom: $ibc_denom"
              echo "> Consumer rewards pool balances:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              val1_rewards=$(curl -s http://localhost:$whale_api/cosmos/distribution/v1beta1/validators/$VALOPER_1/outstanding_rewards | jq -r '.rewards.rewards')
              echo "> val1_rewards: $val1_rewards"
              val1_consumer_rewards=$(echo $val1_rewards | jq -r --arg DENOM "$ibc_denom" '.[] | select(.denom==$DENOM).amount')
              echo "> val1_consumer_rewards: $val1_consumer_rewards"
              if [ -z "$val1_consumer_rewards" ]; then
                echo "FAIL: No consumer rewards distributed to val1."
                exit 1
              else
                echo "PASS: Consumer rewards distributed to val1."
              fi

      Test-12-ics-sovereign-new-connection:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Set up relayer
            run: |
              source scripts/vars.sh
              scripts/setup_relayer.sh

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 $log_prefix$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3

          - name: Start sovereign chain
            run: |
              source scripts/vars_sovereign.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 $log_prefix$COUNT_WIDTH
              scripts/wait_for_block.sh $whale_rpc 3
          - name: Create transfer channel with sovereign chain
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              sed -i -e "s|ccv_consumer_chain = true|ccv_consumer_chain = false|g" ~/.hermes/config.toml
              sleep $(($COMMIT_TIMEOUT*5))
              hermes create connection --a-chain $CHAIN_ID --b-chain $CONSUMER_CHAIN_ID
              hermes create channel --a-chain $CHAIN_ID --a-connection connection-0 --a-port transfer --b-port transfer 
    
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
          - name: Start relayer
            run: scripts/start_relayer.sh

          - name: List sovereign chain channels
            run: |
              source scripts/vars_sovereign.sh
              $CHAIN_BINARY q ibc channel channels --node http://localhost:$whale_rpc
    
          - name: Add changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              scripts/add_consumer.sh

          - name: Opt in to changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              scripts/consumer_opt_in.sh

          - name: Sovereign chain changeover upgrade
            run: |
              source scripts/vars_sovereign.sh
              export DOWNLOAD_URL=$CONSUMER_CHAIN_BINARY_URL
              scripts/upgrade_changeover.sh
    
          - name: Spawn changeover chain ICS v6.4.0
            env:
              PROVIDER_ICS: v6.4.0
              REUSE_CONNECTION: false
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              scripts/spawn_changeover.sh

          - name: Start changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh   
              source scripts/vars_changeover.sh
              ./$STOP_SCRIPT
              wget $CONSUMER_CHAIN_BINARY_URL -O $CONSUMER_CHAIN_BINARY -q
              chmod +x $CONSUMER_CHAIN_BINARY
              $CONSUMER_CHAIN_BINARY version --long
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*3))
              tail -n 100 ${consumer_log_prefix}$COUNT_WIDTH

          - name: _Post-changeover consumer chain produces blocks> ICS v6.4.0
            run: |
              source scripts/vars.sh 
              source scripts/vars_changeover.sh
              tests/test_block_production.sh 127.0.0.1 ${consumer_whale_rpc} 5

          - name: List changeover chain channels
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              $CONSUMER_CHAIN_BINARY q ibc channel channels --node http://localhost:$consumer_whale_rpc
    
          - name: Establish CCV channel for changeover chain ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh 
              # sudo systemctl stop $RELAYER
              tmux send-keys -t relayer C-c
              sleep $(($COMMIT_TIMEOUT*2))
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              echo "Creating channel with Hermes..."
              hermes create connection --a-chain $CONSUMER_CHAIN_ID --a-client 07-tendermint-1 --b-client $client_id
              hermes create channel --a-chain $CONSUMER_CHAIN_ID --a-port consumer --b-port provider --order ordered --a-connection connection-1 --channel-version 1
              # sudo systemctl start $RELAYER
              sed -i -e "s|ccv_consumer_chain = false|ccv_consumer_chain = true|g" ~/.hermes/config.toml
              scripts/start_relayer.sh
              sleep $(($COMMIT_TIMEOUT*3))
          - name: _Changeover CCV channel verified> ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              tests/test_ccv_channel.sh
          - name: _IBC transfer successful> ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              client_id=$($CHAIN_BINARY q provider list-consumer-chains -o json --home $whale_home | jq -r --arg chain "$CONSUMER_CHAIN_ID" '.chains[] | select(.chain_id==$chain).client_id')
              connection_id=$($CHAIN_BINARY q ibc connection connections -o json --home $whale_home | jq -r --arg client "$client_id" '.connections[] | select(.client_id==$client).id')
              # channel_id=$($CHAIN_BINARY q ibc channel connections $connection_id -o json --home $whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              # consumer_channel_id=$($CONSUMER_CHAIN_BINARY q ibc channel connections $connection_id -o json --home $consumer_whale_home | jq -r '.channels[] | select(.port_id=="transfer").channel_id')
              channel_id="channel-2"
              consumer_channel_id="channel-2"
              echo "> Provider channel: $channel_id, consumer channel: $consumer_channel_id"
              tests/test_consumer_ibc_transfer.sh $channel_id $consumer_channel_id
    
          
          - name: Trigger consumer rewards distribution> ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Send tx with high fees in consumer chain."
              $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
              --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
              --gas auto --fees 1000000ucon \
              --home $consumer_whale_home -o json -y | jq '.'
              sleep $(($COMMIT_TIMEOUT*10))
              echo "> Balance in consumer chain recipient:"
              $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $consumer_whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Rewards pool:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'

          - name: Register consumer reward denoms
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              scripts/update_consumer_rewards.sh channel-2              
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              
          - name: Trigger consumer rewards distribution> ICS v6.4.0
            run: |
              source scripts/vars.sh  
              source scripts/vars_changeover.sh
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Send tx with high fees in consumer chain."
              $CONSUMER_CHAIN_BINARY tx bank send consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 1$CONSUMER_DENOM \
              --from consumer1r5v5srda7xfth3hn2s26txvrcrntldju7725yc \
              --gas auto --fees 1000000ucon \
              --home $consumer_whale_home -o json -y | jq '.'
              sleep $(($COMMIT_TIMEOUT*10))
              echo "> Balance in consumer chain recipient:"
              $CONSUMER_CHAIN_BINARY q bank balances consumer1ay4dpm0kjmvtpug28vgw5w32yyjxa5spqtvan8 --home $consumer_whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              echo "> Rewards pool:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'

          - name: _Consumer rewards distribution> ICS v6.4.0
            run: |
              source scripts/vars.sh
              source scripts/vars_changeover.sh
              ibc_denom=ibc/$(echo -n transfer/channel-2/$CONSUMER_DENOM | shasum -a 256 | cut -d ' ' -f1 | tr '[a-z]' '[A-Z]')
              echo "> Denom: $ibc_denom"
              echo "> Consumer rewards pool balances:"
              $CHAIN_BINARY q bank balances cosmos1ap0mh6xzfn8943urr84q6ae7zfnar48am2erhd --home $whale_home -o json | jq '.'
              echo "> Val1 outstanding rewards:"
              $CHAIN_BINARY q distribution validator-outstanding-rewards $VALOPER_1 --home $whale_home -o json | jq '.'
              val1_rewards=$(curl -s http://localhost:$whale_api/cosmos/distribution/v1beta1/validators/$VALOPER_1/outstanding_rewards | jq -r '.rewards.rewards')
              echo "> val1_rewards: $val1_rewards"
              val1_consumer_rewards=$(echo $val1_rewards | jq -r --arg DENOM "$ibc_denom" '.[] | select(.denom==$DENOM).amount')
              echo "> val1_consumer_rewards: $val1_consumer_rewards"
              if [ -z "$val1_consumer_rewards" ]; then
                echo "FAIL: No consumer rewards distributed to val1."
                exit 1
              else
                echo "PASS: Consumer rewards distributed to val1."
              fi


      Test-13-expedited-proposals:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          COSMOVISOR: false
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli

          - name: Start chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64    
              source scripts/vars.sh
              scripts/setup.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 log_$COUNT_WIDTH
          - name: Block production check
            run: |
              source scripts/vars.sh
              scripts/wait_for_block.sh $whale_rpc 3
            
          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
    
          - name: _Test expedited proposals
            run: |
              source ./scripts/vars.sh
              tests/test_expedited_proposals.sh

      Test-14-key-management:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          GO_VERSION: 1.24.1
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Set up chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
          
          - name: Set up tmkms
            run: |
              source scripts/vars.sh
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
              chmod +x rustup-init.sh
              ./rustup-init.sh -y
              cargo install tmkms --features=softsign
              tmkms init /home/runner/.kms
              tmkms init .kms       
              tmkms softsign keygen /home/runner/.kms/secrets/secret_connection_key
              cp $whale_home/config/priv_validator_key.json /home/runner/.kms/secrets/
              tmkms softsign import /home/runner/.kms/secrets/priv_validator_key.json /home/runner/.kms/secrets/priv_validator_key
              tmux new-session -d -s tmkms "tmkms start -c templates/tmkms-config.toml 2>&1 | tee tmkms.log"
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 tmkms.log
          - name: Start chain with tmkms
            run: |
              source scripts/vars.sh
              echo "> Configure config.toml for tmkms"
              toml set --toml-path $whale_home/config/config.toml priv_validator_laddr "tcp://127.0.0.1:24001"
              sed -i -e "s/priv_validator_key_file/#priv_validator_key_file/" $whale_home/config/config.toml
              sed -i -e "s/priv_validator_key_file/#priv_validator_state_file/" $whale_home/config/config.toml
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 50 $whale_log
              echo "> Tmkms logs:"
              tail -n 50 tmkms.log
              scripts/wait_for_block.sh 3
          
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh

          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
                  
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh
          - name: _API endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_api.sh localhost $whale_api
          - name: _RPC endpoints check
            run: |
              source scripts/vars.sh
              tests/test_endpoints_rpc.sh localhost $whale_rpc

      Test-15-state-sync:
        runs-on: ubuntu-24.04
        needs: set-versions
        strategy:
          matrix:
            start_version: [ "${{ needs.set-versions.outputs.start_version }}" ]
            target_version: [ "${{ needs.set-versions.outputs.target_version }}" ]
            upgrade_name: [ "${{ needs.set-versions.outputs.upgrade_name }}" ]
          fail-fast: false
        env:
          BINARY_SOURCE: ${{ needs.set-versions.outputs.binary_source }}
          GO_VERSION: 1.24.1
        steps:
          - name: Update PATH
            run: |
              mkdir -p $HOME/go/bin
              echo "$HOME/go/bin" >> $GITHUB_PATH
              echo "$HOME/.hermes" >> $GITHUB_PATH
              echo "$HOME/.relayer" >> $GITHUB_PATH
          - name: Bypass the grub-efi-amd64-signed package
            run: sudo apt-mark hold grub-efi-amd64-signed
          - name: Check out repository code
            uses: actions/checkout@v4
          - name: Set up Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10'
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              python -m pip install toml-cli
          - name: Set up chain
            run: |
              export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/${{ matrix.start_version }}/gaiad-${{ matrix.start_version }}-linux-amd64  
              source scripts/vars.sh
              scripts/setup.sh
                        
          - name: Set up chain
            run: |
              source scripts/vars.sh
              export COMMIT_TIMEOUT=3
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tail -n 100 $whale_log
              scripts/wait_for_block.sh 3
          
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh

          - name: Test software upgrade
            env:
              TARGET_VERSION: ${{ matrix.target_version }}
              DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ matrix.target_version }}/gaiad-${{ matrix.target_version }}-linux-amd64
            run: |
              source scripts/vars.sh
              scripts/upgrade.sh ${{ matrix.upgrade_name }}
          
          - name: _Blocks produced after upgrade
            run: |
              source scripts/vars.sh
              tests/test_block_production.sh 127.0.0.1 $whale_rpc 5
                  
          - name: _Transactions verified> bank send, delegate, and withdraw rewards
            run: |
              source scripts/vars.sh
              tests/test_tx.sh

          - name: _State sync test
            run: |
              source scripts/vars.sh
              echo "> Sleeping $[ $COMMIT_TIMEOUT * $STATE_SYNC_SNAPSHOT_INTERVAL ] seconds for state sync to be ready"
              sleep $[ $COMMIT_TIMEOUT * $STATE_SYNC_SNAPSHOT_INTERVAL ]
              source scripts/vars_state_sync.sh
              scripts/setup_state_sync.sh
              ./$START_SCRIPT
              sleep $(($COMMIT_TIMEOUT*2))
              tests/test_block_production.sh 127.0.0.1 ${rpc_prefix}999 5