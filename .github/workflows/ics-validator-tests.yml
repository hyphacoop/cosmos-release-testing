---
name: ICS Validator Tests
on:
  workflow_dispatch:
  schedule:
    # At 16:00 on Monday.
    - cron: '0 16 * * 1'
  push:

jobs:
  provision-runner:
    concurrency:
      group: provision-vm-runner
      cancel-in-progress: false
    strategy:
      fail-fast: true
      max-parallel: 1
    uses: ./.github/workflows/provision-runner-vm.yml
    secrets: inherit

  test-validator:
    runs-on: cosmos-ubuntu2404-vm-set
    environment: validator-tests
    env:
      RPC_NODE: rpc.provider-sentry-01.ics-testnet.polypore.xyz
      PROVIDER_RPC_PORT: 27001
      PROVIDER_API_PORT: 25001
      PROVIDER_GRPC_PORT: 26001
      PROVIDER_P2P_PORT: 28001
      PROVIDER_PPROF_PORT: 6061
      PROVIDER_PROM_PORT: 26660
      PROVIDER_SERVICE_NAME: gaiad
      CONSUMER_RPC_PORT: 27002
      CONSUMER_API_PORT: 25002
      CONSUMER_GRPC_PORT: 26002
      CONSUMER_P2P_PORT: 28002
      CONSUMER_PPROF_PORT: 6062
      CONSUMER_PROM_PORT: 26662
    steps:
      - name: IP addresses
        run: |
          ipv6_addr=$(ip -j addr  | jq -r '.[] | select(.ifname=="eth0")| .addr_info[] | select((.family=="inet6") and .scope=="global") | .local')
          ipv4_addr=$(ip -j addr  | jq -r '.[] | select(.ifname=="eth0")| .addr_info[] | select(.family=="inet") | .local')
          echo "IPv6: $ipv6_addr"
          echo "IPv4: $ipv4_addr"
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Get current running gaiad version
        run: |
          RUNNING_VERSION=$(curl -s https://$RPC_NODE/abci_info | jq -r '.result.response.version')
          echo "Running gaiad version: $RUNNING_VERSION"
          echo "RUNNING_VERSION=$RUNNING_VERSION" >> $GITHUB_ENV
      - name: Install required packages
        run: |
          sudo apt update
          sudo apt -y install python-is-python3 python3-venv
      - name: Init Python venv
        run: python -m venv ~/env
      - name: Install dependencies
        run: |
          source ~/env/bin/activate
          python -m pip install --upgrade pip
          python -m pip install toml-cli requests
      - name: Download binary from cosmos/gaia repo
        run: |
          sudo wget -nv https://github.com/cosmos/gaia/releases/download/${{ env.RUNNING_VERSION }}/gaiad-${{ env.RUNNING_VERSION }}-linux-amd64 -O /usr/local/bin/gaiad
          sudo chmod +x /usr/local/bin/gaiad
          gaiad version
      - name: Configure gaiad
        run: |
          gaiad config set client chain-id provider
          gaiad config set client keyring-backend test
          # gaiad config set client node "https://$RPC_NODE"
          gaiad config set client node "tcp://localhost:$PROVIDER_RPC_PORT"
          gaiad config set app minimum-gas-prices "0.0025uatom"
      - name: Initializing chain to sync with ICS Testnet provider
        env:
          NODE_MONIKER: test-val
          GENESIS_URL: https://github.com/cosmos/testnets/raw/master/interchain-security/provider/provider-genesis.json
          SEEDS: "08ec17e86dac67b9da70deb20177655495a55407@provider-seed-01.ics-testnet.polypore.xyz:26656,4ea6e56300a2f37b90e58de5ee27d1c9065cf871@provider-seed-02.ics-testnet.polypore.xyz:26656"
          SYNC_RPC_1: https://rpc.provider-state-sync-01.ics-testnet.polypore.xyz:443
          SYNC_RPC_2: https://rpc.provider-state-sync-02.ics-testnet.polypore.xyz:443
          GAS_PRICES: "0.0025uatom"
          CHAIN_ID: provider
          CHAIN_BINARY: gaiad
          NODE_HOME: /home/runner/.gaia/
        run: |
          source ~/env/bin/activate
          echo "Initializing $NODE_HOME..."
          $CHAIN_BINARY config set client chain-id $CHAIN_ID --home $NODE_HOME
          $CHAIN_BINARY config set client keyring-backend test --home $NODE_HOME
          $CHAIN_BINARY config set client broadcast-mode sync --home $NODE_HOME
          $CHAIN_BINARY init $NODE_MONIKER --chain-id $CHAIN_ID --home $NODE_HOME
          sed -i -e "/seeds =/ s^= .*^= \"$SEEDS\"^" $NODE_HOME/config/config.toml
          echo "Configuring state sync..."
          CURRENT_BLOCK=$(curl -s $SYNC_RPC_1/block | jq -r '.result.block.header.height')
          TRUST_HEIGHT=$[$CURRENT_BLOCK-1000]
          TRUST_BLOCK=$(curl -s $SYNC_RPC_1/block\?height\=$TRUST_HEIGHT)
          TRUST_HASH=$(echo $TRUST_BLOCK | jq -r '.result.block_id.hash')
          sed -i -e '/enable =/ s/= .*/= true/' $NODE_HOME/config/config.toml
          sed -i -e '/trust_period =/ s/= .*/= "8h0m0s"/' $NODE_HOME/config/config.toml
          sed -i -e "/trust_height =/ s/= .*/= $TRUST_HEIGHT/" $NODE_HOME/config/config.toml
          sed -i -e "/trust_hash =/ s/= .*/= \"$TRUST_HASH\"/" $NODE_HOME/config/config.toml
          sed -i -e "/rpc_servers =/ s^= .*^= \"$SYNC_RPC_1,$SYNC_RPC_2\"^" $NODE_HOME/config/config.toml
          sed -i -e "/minimum-gas-prices =/ s^= .*^= \"$GAS_PRICES\"^" $NODE_HOME/config/app.toml
          echo "Configuring ports..."
          toml set --toml-path $NODE_HOME/config/config.toml rpc.laddr "tcp://127.0.0.1:$PROVIDER_RPC_PORT"
          toml set --toml-path $NODE_HOME/config/app.toml api.enable true
          toml set --toml-path $NODE_HOME/config/app.toml api.address "tcp://localhost:$PROVIDER_API_PORT"
          toml set --toml-path $NODE_HOME/config/app.toml grpc.address "localhost:$PROVIDER_GRPC_PORT"
          toml set --toml-path $NODE_HOME/config/config.toml p2p.laddr "tcp://0.0.0.0:$PROVIDER_P2P_PORT"
          toml set --toml-path $NODE_HOME/config/config.toml rpc.pprof_laddr "localhost:$PROVIDER_PPROF_PORT"
          toml set --toml-path $NODE_HOME/config/config.toml instrumentation.prometheus_listen_addr ":$PROVIDER_PROM_PORT"
          echo "Replaceing genesis..."
          wget -nv $GENESIS_URL -O genesis.json
          mv genesis.json $NODE_HOME/config/genesis.json
      - name: Create provider service
        env:
          NODE_HOME: /home/runner/.gaia/
        run: |
          sudo touch /etc/systemd/system/$PROVIDER_SERVICE_NAME.service
          echo "[Unit]"                               | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service
          echo "Description=Gaia service"             | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "After=network-online.target"          | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo ""                                     | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "[Service]"                            | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "User=runner"                          | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "ExecStart=/usr/local/bin/gaiad start --x-crisis-skip-assert-invariants --home $NODE_HOME" | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "Restart=no"                           | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "LimitNOFILE=4096"                     | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo ""                                     | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "[Install]"                            | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "WantedBy=multi-user.target"           | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          sudo systemctl daemon-reload
      - name: Enable and start provider service
        run: |
          sudo systemctl enable --now $PROVIDER_SERVICE_NAME.service
          sudo systemctl restart systemd-journald
      - name: Wait for Provider service to start and stabilize
        run: |
          journalctl -fu $PROVIDER_SERVICE_NAME.service &
          tests/test_block_production.sh 127.0.0.1 $PROVIDER_RPC_PORT 5 1000
      - name: Syncing Provider Chain
        run: |
          catching_up="true"
          while [ $catching_up == "true" ]
          do
            catching_up=$(curl -s 127.0.0.1:$PROVIDER_RPC_PORT/status | jq -r .result.sync_info.catching_up)
            echo "Still Syncing: $catching_up"
            sleep 5
          done
          echo "Done Syncing"
      - name: Stop provider service
        run: |
          sudo systemctl stop $PROVIDER_SERVICE_NAME.service
          sleep 10
      - name: Restore node keys
        env:
          NODE_HOME: /home/runner/.gaia/
        run: |
          echo "${{ secrets.PRIV_VALIDATOR_KEY }}" | base64 --decode > $NODE_HOME/config/priv_validator_key.json
          echo "${{ secrets.NODE_KEY }}" | base64 --decode > $NODE_HOME/config/node_key.json
          echo "[INFO] Node ID:"
          gaiad comet show-node-id
          echo "[INFO] Validator pub key:"
          gaiad comet show-validator
          node_id=$(gaiad comet show-node-id)
          val_pubkey=$(gaiad comet show-validator)
          echo "PROVIDER_NODE_ID=$node_id" >> $GITHUB_ENV
          echo "PROVIDER_VAL_PUBKEY=$val_pubkey" >> $GITHUB_ENV
      - name: Start provider service
        run: |
          sudo systemctl start $PROVIDER_SERVICE_NAME.service
          journalctl -fu $PROVIDER_SERVICE_NAME.service &
          tests/test_block_production.sh 127.0.0.1 $PROVIDER_RPC_PORT 5 1000
      - name: Syncing Provider Chain
        run: |
          catching_up="true"
          while [ $catching_up == "true" ]
          do
            catching_up=$(curl -s 127.0.0.1:$PROVIDER_RPC_PORT/status | jq -r .result.sync_info.catching_up)
            echo "Still Syncing: $catching_up"
            sleep 5
          done
          echo "Done Syncing"

      - name: Restore validator wallet
        run: echo "${{ secrets.VALIDATOR_MNEMONIC }}" | gaiad keys add validator --recover
      - name: List all wallets
        env:
          CHAIN_BINARY: gaiad
        run: |
          $CHAIN_BINARY keys list
      - name: Fund the wallet if less than 2atom
        env:
          CHAIN_BINARY: gaiad
        run: |
          echo "[INFO] Balance of ${{ vars.PROVIDER_SELF_DELEGATE_ADDRESS }}:"
          $CHAIN_BINARY q bank balances ${{ vars.PROVIDER_SELF_DELEGATE_ADDRESS }}
          json_bank=$($CHAIN_BINARY q bank balances ${{ vars.PROVIDER_SELF_DELEGATE_ADDRESS }} -o json)
          current_uatom_balance=$(echo $json | jq -r '.balances[] | select(.denom=="uatom") | .amount')
          echo "[INFO] Current amount of uatom: $current_uatom_balance"
          if [ $current_uatom_balance -lt 2000000 ]
          then
            echo "Current amount less than 2000000 requesting funds from faucet..."
            json=$(curl "https://faucet.polypore.xyz/request?address=${{ vars.PROVIDER_SELF_DELEGATE_ADDRESS }}&chain=provider" | jq -r '.')
            echo $json | jq -r '.'
            status=$(echo $json | jq -r '.status')
            if [ $status != "success" ]
            then
              echo "Failed to request finds from faucet"
              exit 1
            fi
            tests/test_block_production.sh $RPC_NODE $RPC_PORT 1
          else
            echo "Funds more than 2000000uatom"
          fi
      - name: Query bank balances
        run: gaiad q bank balances $TEST_WALLET
      
