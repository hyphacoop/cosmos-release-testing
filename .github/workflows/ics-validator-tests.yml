---
name: ICS Transection Tests
on:
  workflow_dispatch:
  schedule:
    # At 16:00 on Monday.
    - cron: '0 16 * * 1'
  push:

jobs:
  provision-runner:
    concurrency:
      group: provision-vm-runner
      cancel-in-progress: false
    strategy:
      fail-fast: true
      max-parallel: 1
    uses: ./.github/workflows/provision-runner-vm.yml
    secrets: inherit

  test-validator:
    runs-on: cosmos-ubuntu2404-vm-set
    environment: validator-tests
    env:
      RPC_NODE: rpc.provider-sentry-01.ics-testnet.polypore.xyz
      PROVIDER_RPC_PORT: 27001
      PROVIDER_API_PORT: 25001
      PROVIDER_GRPC_PORT: 26001
      PROVIDER_P2P_PORT: 28001
      PROVIDER_PPROF_PORT: 6061
      PROVIDER_PROM_PORT: 26660
      PROVIDER_PROVIDER_SERVICE_NAME: gaiad
      CONSUMER_RPC_PORT: 27002
      CONSUMER_API_PORT: 25002
      CONSUMER_GRPC_PORT: 26002
      CONSUMER_P2P_PORT: 28002
      CONSUMER_PPROF_PORT: 6062
      CONSUMER_PROM_PORT: 26662
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Get current running gaiad version
        run: |
          RUNNING_VERSION=$(curl -s https://$RPC_NODE/abci_info | jq -r '.result.response.version')
          echo "Running gaiad version: $RUNNING_VERSION"
          echo "RUNNING_VERSION=$RUNNING_VERSION" >> $GITHUB_ENV
      - name: Install required packages
        run: apt -y install python-is-python3 python3-venv
      - name: Init Python venv
        run: python -m venv ~/env
      - name: Install dependencies
        run: |
          source ~/env/bin/activate
          python -m pip install --upgrade pip
          python -m pip install toml-cli requests
      - name: Download binary from cosmos/gaia repo
        run: |
          sudo wget -nv https://github.com/cosmos/gaia/releases/download/${{ env.RUNNING_VERSION }}/gaiad-${{ env.RUNNING_VERSION }}-linux-amd64 -O /usr/local/bin/gaiad
          sudo chmod +x /usr/local/bin/gaiad
          gaiad version
      - name: Configure gaiad
        run: |
          gaiad config set client chain-id provider
          gaiad config set client keyring-backend test
          # gaiad config set client node "https://$RPC_NODE"
          gaiad config set app minimum-gas-prices "0.0025uatom"
      - name: Configure gaiad ports
        run: |
          source ~/env/bin/activate
          toml set --toml-path ~/.gaia/config/config.toml rpc.laddr "tcp://127.0.0.1:${{ vars.PROVIDER_RPC_PORT }}"
          toml set --toml-path ~/.gaia/config/app.toml api.enable true
          toml set --toml-path ~/.gaia/config/app.toml api.address "tcp://localhost:${{ vars.PROVIDER_API_PORT }}"
          toml set --toml-path ~/.gaia/config/app.toml grpc.address "localhost:${{ vars.PROVIDER_GRPC_PORT }}"
          toml set --toml-path ~/.gaia/config/config.toml p2p.laddr "tcp://0.0.0.0:${{ vars.PROVIDER_P2P_PORT }}"
          toml set --toml-path ~/.gaia/config/config.toml rpc.pprof_laddr "localhost:${{ vars.PROVIDER_PPROF_PORT }}"
          toml set --toml-path ~/.gaia/config/config.toml instrumentation.prometheus_listen_addr ":${{ vars.PROVIDER_PROM_PORT }}"

      - name: Restore node keys
        run: |
          echo "${{ secrets.PRIV_VALIDATOR_KEY }}" | base64 --decode >> ~/.gaia/config/priv_validator_key.json
          echo "${{ secrets.NODE_KEY }}" | base64 --decode >> ~/.gaia/config/node_key.json
          echo "[INFO] Node ID:"
          gaiad comet show-node-id
          echo "[INFO] Validator pub key:"
          gaiad comet show-validator
          node_id=$(gaiad comet show-node-id)
          val_pubkey=$(gaiad comet show-validator)
          echo "PROVIDER_NODE_ID=$node_id" >> $GITHUB_ENV
          echo "PROVIDER_VAL_PUBKEY=$val_pubkey" >> $GITHUB_ENV

      - name: Restore validator wallet
        run: echo "${{ secrets.VALIDATOR_MNEMONIC }}" | gaiad keys add validator --recover
      - name: List all wallets
        run: |
          gaiad keys list
          wallet=$(gaiad keys list --output json | jq -r '.[] | select(.name == ${{ vars.PROVIDER_SELF_DELEGATE_ADDRESS }} ) | .address')
      # - name: Fund the wallet if less than 3atom
      #   run: |
      #     json=$(curl "https://faucet.polypore.xyz/request?address=$TEST_WALLET&chain=provider" | jq -r '.')
      #     echo $json | jq -r '.'
      #     status=$(echo $json | jq -r '.status')
      #     if [ $status != "success" ]
      #     then
      #       echo "Failed to request finds from faucet"
      #       exit 1
      #     fi
      #     tests/test_block_production.sh $RPC_NODE $RPC_PORT 1
      # - name: Query bank balances
      #   run: gaiad q bank balances $TEST_WALLET
      - name: Create provider service
        run: |
          sudo touch /etc/systemd/system/$PROVIDER_SERVICE_NAME.service
          echo "[Unit]"                               | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service
          echo "Description=Gaia service"             | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "After=network-online.target"          | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo ""                                     | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "[Service]"                            | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "User=$USER"                           | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "ExecStart=/usr/local/bin/gaiad start --x-crisis-skip-assert-invariants --home $NODE_HOME" | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "Restart=no"                           | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "LimitNOFILE=4096"                     | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo ""                                     | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "[Install]"                            | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          echo "WantedBy=multi-user.target"           | sudo tee /etc/systemd/system/$PROVIDER_SERVICE_NAME.service -a
          sudo systemctl daemon-reload
      - name: Enable and start provider service
        run: |
          sudo systemctl enable --now $PROVIDER_SERVICE_NAME.service
          sudo systemctl restart systemd-journald
      - name: Wait for Provider service to start and stabilize
        run: |
          journal -fu $PROVIDER_SERVICE_NAME.service &
          tests/test_block_production.sh 127.0.0.1 ${{ vars.PROVIDER_RPC_PORT }} 50 1000
      - name: Syncing Provider Chain
        run: |
          catching_up="true"
          while [ $catching_up == "true" ]
          do
            catching_up=$(curl -s 127.0.0.1:${{ vars.PROVIDER_RPC_PORT }}/status | jq -r .result.sync_info.catching_up)
            echo "Still Syncing: $catching_up"
            sleep 5
          done
          echo "Done Syncing"
