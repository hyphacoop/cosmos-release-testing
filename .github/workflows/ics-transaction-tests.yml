---
name: ICS Transection Tests
on:
  workflow_dispatch:
  schedule:
    # At 05:30 everyday.
    - cron: '0 3 * * *'
  push:

jobs:
  test-transactions:
    runs-on: ubuntu-24.04
    env:
      PION_CLIENT_ID: 07-tendermint-28
      PION_CONNECTION_ID: connection-19
      PION_CHANNEL_ID: channel-32
      PION_APPLE_ADDR: neutron1arjwkww79m65csulawqngr7ngs4uqu5hz655s6
      APPLE_VALOPER: cosmosvaloper1arjwkww79m65csulawqngr7ngs4uqu5hr3frxw
      APPLE_ADDR: cosmos1arjwkww79m65csulawqngr7ngs4uqu5hx9ak2a
      BANANA_ADDR: cosmos1apac0g5s88pfjvlgjqjnr0kdpkpmhx8pkdp0r5
      CHERRY_ADDR: cosmos1e5yfpc8l6g4808fclmlyd38tjgxuwshn7xzkvf
      FAUCET_ADDR: cosmos19mkwu6ne284ufqgdqnv4k6cp0qqy9x0742p3d2
      RPC_NODE: rpc.provider-sentry-01.ics-testnet.polypore.xyz
      RPC_PORT: 26657
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Get current running gaiad version
        run: |
          RUNNING_VERSION=$(curl -s https://$RPC_NODE/abci_info | jq -r '.result.response.version')
          echo "Running gaiad version: $RUNNING_VERSION"
          echo "RUNNING_VERSION=$RUNNING_VERSION" >> $GITHUB_ENV
      - name: Download binary from cosmos/gaia repo
        run: |
          sudo wget -nv https://github.com/cosmos/gaia/releases/download/${{ env.RUNNING_VERSION }}/gaiad-${{ env.RUNNING_VERSION }}-linux-amd64 -O /usr/local/bin/gaiad
          sudo chmod +x /usr/local/bin/gaiad
          gaiad version
      - name: Configure gaiad
        run: |
          gaiad config set client chain-id provider
          gaiad config set client keyring-backend test
          gaiad config set client node "https://$RPC_NODE"
      - name: Create test wallet
        run: gaiad keys add test-wallet
      - name: List all wallets
        run: |
          gaiad keys list
          wallet=$(gaiad keys list --output json | jq -r '.[] | select(.name == "test-wallet") | .address')
          echo "TEST_WALLET=$wallet" >> $GITHUB_ENV
      - name: Fund the wallet
        run: |
          json=$(curl "https://faucet.polypore.xyz/request?address=$TEST_WALLET&chain=provider" | jq -r '.')
          echo $json | jq -r '.'
          status=$(echo $json | jq -r '.status')
          if [ $status != "success" ]
          then
            echo "Failed to request finds from faucet"
            exit 1
          fi
          tests/test_block_production.sh $RPC_NODE $RPC_PORT 1
      - name: Query bank balances
        run: gaiad q bank balances $TEST_WALLET
      - name: Test bank send
        run: |
          json=$(gaiad tx bank send $TEST_WALLET cosmos19mkwu6ne284ufqgdqnv4k6cp0qqy9x0742p3d2 10000uatom --fees 10000uatom -y -o json)
          tests/test_block_production.sh $RPC_NODE $RPC_PORT 1
          echo "[INFO] JSON output:"
          echo $json
          txhash=$(echo $json | jq -r '.txhash')
          echo "[INFO] txhash: $txhash"
          tx_json=$(gaiad q tx $txhash -o json)
          echo "[INFO] TX:"
          echo $tx_json | jq -r '.'
          code=$(echo $tx_json | jq -r '.code')
          echo "[INFO] Code: $code"
          if [ $code -ne 0 ]
          then
            echo "TX code is not 0"
            exit 1
          fi
      - name: Refund leftover funds to faucet
        if: always()
        run: |
          json=$(gaiad q bank balances $TEST_WALLET -o json)
          echo $json | jq -r '.'
          amount=$(echo $json | jq -r ".balances[] | select(.denom==\"uatom\").amount")
          echo "[INFO] Amount is: $amount"
          let refund=$amount-10000
          echo "[INFO] Refund amount is: $refund"
          gaiad tx bank send $TEST_WALLET $FAUCET_ADDR ${refund}uatom --fees 10000uatom -y -o json | jq -r '.'
          tests/test_block_production.sh $RPC_NODE $RPC_PORT 1
          json=$(gaiad q bank balances $TEST_WALLET -o json)
          echo "[INFO] Current balances"
          echo $json | jq -r '.' 
          