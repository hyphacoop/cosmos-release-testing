---

name: Test Gaia Stateful Upgrade Steps - v19
on:
  workflow_call:
    inputs:
      runs-on-os:
        required: true
        type: string
      gaia_version:
        required: true
        type: string
      upgrade_version:
        required: true
        type: string
      env_name:
        required: true
        type: string
      archive_url:
        required: true
        type: string
      
jobs:
  test-upgrade:
    runs-on: ${{ inputs.runs-on-os }}
    environment: ${{ inputs.env_name }}
    env:
      SSH_KEYS: ${{ vars.SSH_KEYS }}
      PROVIDER_SERVICE_1: ${{ vars.PROVIDER_SERVICE_1 }}
      CHAIN_BINARY: ${{ vars.CHAIN_BINARY }}
      CHAIN_BINARY_SECONDARY: ${{ vars.CHAIN_BINARY_SECONDARY }}
      HOME_1: ${{ vars.HOME_1 }}
      CHAIN_ID: ${{ vars.CHAIN_ID }}
      MONIKER_1: ${{ vars.MONIKER_1 }}
      MONIKER_2: ${{ vars.MONIKER_2 }}
      MONIKER_4: ${{ vars.MONIKER_4 }}
      MONIKER_5: ${{ vars.MONIKER_5 }}
      MNEMONIC_1: ${{ vars.MNEMONIC_1 }}
      MNEMONIC_2: ${{ vars.MNEMONIC_2 }}
      MNEMONIC_4: ${{ vars.MNEMONIC_4 }}
      MNEMONIC_5: ${{ vars.MNEMONIC_5 }}
      DENOM: ${{ vars.DENOM }}
      VAL_FUNDS: ${{ vars.VAL_FUNDS }}
      VAL_STAKE: ${{ vars.VAL_STAKE }}
      VAL_STAKE_STEP: ${{ vars.VAL_STAKE_STEP }}
      VOTING_PERIOD: ${{ vars.VOTING_PERIOD }}
      VAL1_RPC_PORT: 27001
      VAL1_API_PORT: 25001
      VAL1_GRPC_PORT: 26001
      VAL1_P2P_PORT: 28001
      VAL1_PPROF_PORT: 6061
      VAL1_PROM_PORT: 26660
      WALLET_1: ${{ vars.WALLET_1 }}
      WALLET_2: ${{ vars.WALLET_2 }}
      WALLET_4: ${{ vars.WALLET_4 }}
      WALLET_5: ${{ vars.WALLET_5 }}
      WALLET_CONSUMER_1: ${{ vars.WALLET_CONSUMER_1 }}
      VALOPER_1: ${{ vars.VALOPER_1 }}
      CONSUMER_CHAIN_BINARY_URL: ${{ vars.CONSUMER_CHAIN_BINARY_URL }}
      CONSUMER_CHAIN_BINARY: ${{ vars.CONSUMER_CHAIN_BINARY }}
      CONSUMER_CHAIN_BINARY_URL_2: ${{ vars.CONSUMER_CHAIN_BINARY_URL_2 }}
      CONSUMER_CHAIN_BINARY_2: ${{ vars.CONSUMER_CHAIN_BINARY_2 }}
      CONSUMER_DENOM: ${{ vars.CONSUMER_DENOM }}
      CONSUMER_HOME_1: /home/runner/.cona1
      STRIDE_SOV_CHAIN_BINARY_URL: https://github.com/hyphacoop/cosmos-builds/releases/download/stride-v11.0.0/stride-v11.0.0-linux-amd64
      STRIDE_CON_CHAIN_BINARY_URL: https://github.com/hyphacoop/cosmos-builds/releases/download/stride-v12.1.0/stride-v12.1.0-linux-amd64
      STRIDE_CHAIN_BINARY: strided
      STRIDE_HOME_1: /home/runner/.stride1
      STRIDE_SERVICE_1: stride1.service
      STRIDE_CHAIN_ID: consumerd
      STRIDE_DENOM: ustrd
      STRIDE_WALLET_1: stride1r5v5srda7xfth3hn2s26txvrcrntldjucq88rn
      STRIDE_WALLET_LIQUID: stride17n3vkvg6lwf98p3kanlhlyjk6zkrfla9zrhma6
      STRIDE_WALLET_5: stride17n3vkvg6lwf98p3kanlhlyjk6zkrfla9zrhma6
      STRIDE_API_1: 35001
      STRIDE_GRPC_1: 36001
      STRIDE_RPC_1: 37001
      STRIDE_P2P_1: 38001
      STRIDE_PPROF_1: 39001
      CON1_API_PORT: 25101
      CON1_GRPC_PORT: 26101
      CON1_RPC_PORT: 27101
      CON1_P2P_PORT: 28101
      CON1_PPROF_PORT: 6163
      CONSUMER_SERVICE_1: cona1.service
      BASE_FEES: 30000
      HIGH_FEES: 25000
      GAS: auto
      GAS_ADJUSTMENT: 2.0
      GAS_PRICES: 0.005
      DELEGATE_1: ${{ vars.DELEGATE_1 }}
      DELEGATE_1_AMOUNT: ${{ vars.DELEGATE_1_AMOUNT }}
      DELEGATE_2_AMOUNT: ${{ vars.DELEGATE_2_AMOUNT }}
      LSM_LOG: /home/runner/artifact/lsm_log.csv
      COMMIT_TIMEOUT: 5
      CB_ACCT: cosmos145hytrc49m0hn6fphp8d5h4xspwkawcuzmx498
      VESTING_TARGET: "1772414007"
      UPGRADE_VERSION: ${{ inputs.upgrade_version }}
    steps:
      # Get system info
      - run: sudo apt install -y net-tools
      - name: Install required packages
        run: |
          sudo apt update
          sudo apt dist-upgrade -y
          sudo apt -y install python-is-python3 python3-distutils screen curl jq wget python3-venv python3-pip bc git psmisc build-essential net-tools
      - run: ifconfig
      - run: lscpu
      - run: df -h
      - run: free -m
      - run: uname -a
      - run: lsb_release -a
      - run: echo "GitHub branch is ${{ github.ref }}"
      - run: whoami
      - run: pwd
      - name: mkdir ~/artifact
        run: mkdir ~/artifact
      - name: Update Apt
        run: |
          sudo apt update
          sudo apt dist-upgrade -y
      - name: Install openssh-server
        run: |
          sudo apt install -y openssh-server
          sudo mkdir /run/sshd
          sudo /usr/sbin/sshd
      - name: Setup SSH auth
        run: |
          mkdir -m 700 ~/.ssh
          echo "$SSH_KEYS" > ~/.ssh/authorized_keys
      - name: start-version
        run: echo ${{inputs.gaia_version}}
      - name: target-version
        run: echo ${{inputs.upgrade_version}}
      - name: target-commit
        if: ${{ inputs.upgrade_version == 'main' }}
        run: |
          BUILD_TAG=gaiad-linux-${{inputs.upgrade_version}}
          TARGET_COMMIT=$(curl -s -L -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/hyphacoop/cosmos-builds/releases/tags/$BUILD_TAG | jq -r '.name')
          echo TARGET_COMMIT: $TARGET_COMMIT
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ vars.GO_VER }}
      - name: Consumer chain binary URLs
        run: |
          echo "$CONSUMER_CHAIN_BINARY runs off $CONSUMER_CHAIN_BINARY_URL"
      - name: Update PATH
        run: |
          echo "$HOME/go/bin" >> $GITHUB_PATH
          echo "$HOME/.hermes" >> $GITHUB_PATH
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Init Python venv
        run: python -m venv ~/env
      - name: Install dependencies
        run: |
          source ~/env/bin/activate
          python -m pip install --upgrade pip
          python -m pip install toml-cli
          python -m pip install graph-cli
      - name: Print RPC port
        run: echo $VAL1_RPC_PORT
      - name: Test software upgrade for published releases
        if: ${{ inputs.upgrade_version != 'main' }}
        env:
          DOWNLOAD_URL: https://github.com/cosmos/gaia/releases/download/${{ inputs.upgrade_version }}/gaiad-${{ inputs.upgrade_version }}-linux-amd64
        run: |
          echo "$DOWNLOAD_URL"
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
      - name: Test software upgrade for main branch
        if: ${{ inputs.upgrade_version == 'main' }}
        env:
          DOWNLOAD_URL: https://github.com/hyphacoop/cosmos-builds/releases/download/gaiad-linux-main/gaiad-linux
        run: |
          echo "$DOWNLOAD_URL"
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
      - name: Set up memory monitor for provider
        run: screen -S mem-$PROVIDER_SERVICE_1 -d -m bash scripts/mem-csv.sh $CHAIN_BINARY $HOME/artifact/mem-$PROVIDER_SERVICE_1.csv
      - name: Start chain
        env:
          START_VERSION: ${{inputs.gaia_version}}
          ARCHIVE_URL: ${{ inputs.archive_url }}
        run: scripts/stateful/start_chain.sh
      - name: _Blocks produced after upgrade to v19
        run: tests/test_block_production.sh 127.0.0.1 $VAL1_RPC_PORT 50 12600
      - name: Flush "migration successful" lines
        run: |
          $CHAIN_BINARY keys list --home $HOME_1
      - name: Get starting balances
        run: |
          wallets=$(gaiad --home $HOME_1 keys list --output json | jq -r '.[].address ')
          for i in $wallets; do echo "Balances in wallet $i: "; gaiad --home $HOME_1 q bank balances $i; done
      - name: Query unbonding time
        run: |
          $CHAIN_BINARY --home $HOME_1 q staking params
          unbonding=$($CHAIN_BINARY --home $HOME_1 q staking params -o json | jq -r '.unbonding_time' | sed 's/.$//')
          echo "UNBONDING_TIME=$unbonding" >> $GITHUB_ENV
      - name: Update templates/proposal-add-template.json unbonding time
        run: |
          unbonding_period=$(echo "${{ env.UNBONDING_TIME }}*1000000000" | bc)
          jq ". .unbonding_period=$unbonding_period" templates/proposal-add-template.json > proposal-add-template.json
          mv proposal-add-template.json templates/proposal-add-template.json
          echo "Contents of templates/proposal-add-template.json:"
          cat templates/proposal-add-template.json
      - name: Set voting period to 60s and 15s expedited voting period"
        env:
          VOTING_PERIOD: "20s"
        run: scripts/stateful/set_voting_period.sh templates/proposal-voting-period-60s.json
      - name: Query gov params time
        run: $CHAIN_BINARY --home $HOME_1 q gov params
      - name: Query BlocksPerEpoch
        run: $CHAIN_BINARY --home $HOME_1 q params subspace provider BlocksPerEpoch
      - name: Set BlocksPerEpoch to 1
        run: scripts/stateful/set_epoch.sh templates/proposal-blocks-per-epoch-1.json
      - name: Check BlocksPerEpoch is 1
        run: |
          BPE=$($CHAIN_BINARY --home $HOME_1 q params subspace provider BlocksPerEpoch -o json | jq -r '.param.value')
          echo "BlocksPerEpoch is: $BPE"
          if [ $BPE != "\"1\"" ]
          then
            echo "BlocksPerEpoch is not 1"
            exit 1
          fi

      - name: _Transactions verified> bank send, delegate, and withdraw rewards
        run: tests/stateful/test_tx.sh
      - name: Send funds to wallet 4
        run: $CHAIN_BINARY tx bank send $WALLET_1 $WALLET_4 10000000$DENOM --home $HOME_1 --from $MONIKER_1 --keyring-backend test --gas $GAS --gas-adjustment $GAS_ADJUSTMENT --fees $BASE_FEES$DENOM --chain-id $CHAIN_ID -y -b sync
      - name: Wait for 1 block to pass
        run: tests/test_block_production.sh 127.0.0.1 $VAL1_RPC_PORT 1 10
      - name: _Provider API tests> gaiad v17
        run: tests/test_endpoints_api.sh localhost $VAL1_API_PORT
      - name: DEBUG
        run: |
          while [ ! -f /continue ]
          do
            sleep 1
          done
      - name: _Provider RPC tests> gaiad v17
        run: tests/test_endpoints_rpc.sh localhost $VAL1_RPC_PORT
      - name: Set up relayer
        run: scripts/stateful/setup_relayer.sh
      - name: Download consumer chain binaries
        run: |
          wget -nv $CONSUMER_CHAIN_BINARY_URL -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY
          chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY
          wget -nv $CONSUMER_CHAIN_BINARY_URL_2 -O $HOME/go/bin/$CONSUMER_CHAIN_BINARY_2
          chmod +x $HOME/go/bin/$CONSUMER_CHAIN_BINARY_2

      - name: Installing secondary chain binaries
        env:
          START_VERSION: ${{ vars.ICA_CHAIN_GAIA_VERSION }}
        run: |
          export CHAIN_BINARY_URL=https://github.com/cosmos/gaia/releases/download/$START_VERSION/gaiad-$START_VERSION-linux-amd64
          echo "Chain binary URL: $CHAIN_BINARY_URL"
          echo "Installing secondary chain binary..."
          wget $CHAIN_BINARY_URL -O $HOME/go/bin/$CHAIN_BINARY_SECONDARY -q
          chmod +x $HOME/go/bin/$CHAIN_BINARY_SECONDARY
      - name: Start secondary chain
        env:
          CHAIN_BINARY: ${{ vars.CHAIN_BINARY_SECONDARY }}
          CHAIN_SERVICE: ica-chain.service
          CHAIN_HOME: /home/runner/.ica-chain
          CHAIN_ID: ica-chain
          VAL_STAKE: 100000000
          API_PORT: 35011
          GRPC_PORT: 36011
          RPC_PORT: 37011
          P2P_PORT: 38011
          PPROF_PORT: 39011
          GAS_PRICE: 0
          MONIKER_RELAYER: ${{ vars.MONIKER_2 }}
          MNEMONIC_RELAYER: ${{ vars.MNEMONIC_2 }}
        run: |
          source ~/env/bin/activate
          scripts/stateful/start_chain_secondary.sh
      - name: _ICA chain produces blocks> ica-chain
        run: tests/test_block_production.sh 127.0.0.1 37011 10
      - name: Send funds to wallet 4 on ICA chain
        env:
          CHAIN_BINARY: ${{ vars.CHAIN_BINARY_SECONDARY }}
          CHAIN_SERVICE: ica-chain.service
          CHAIN_HOME: /home/runner/.ica-chain
        run: |
          $CHAIN_BINARY tx bank send $WALLET_1 $WALLET_4 10000000$DENOM --home $CHAIN_HOME --from $MONIKER_1 --keyring-backend test --gas $GAS --gas-adjustment  $GAS_ADJUSTMENT --fees $BASE_FEES$DENOM -y
          sleep 60
          $CHAIN_BINARY q bank balances $WALLET_4 --home $CHAIN_HOME
      - name: Establish Connection to ICA chain
        env:
          CHAIN_HOME: /home/runner/.val1
        run: |
          killall hermes || true
          screen -XS hermes.service quit || true
          echo "Creating client on host-chain: $CHAIN_ID reference-chain ica-chain"
          hermes create client --host-chain $CHAIN_ID --reference-chain ica-chain
          echo "Creating client on host-chain: ica-chain Reference-chain: $CHAIN_ID"
          hermes create client --reference-chain $CHAIN_ID --host-chain ica-chain
          sleep 30
          # client_id=$(hermes --json query clients --host-chain $CHAIN_ID | jq -r '.result[] | select(.chain_id == "ica-chain") | .client_id')
          # client_id=$($CHAIN_BINARY --home $CHAIN_HOME q ibc client states -o json | jq -r '.client_states[] | select (.client_state.chain_id == "ica-chain") | .client_id')
          # echo "Client ID is: $client_id"
          # hermes create connection --a-chain $CHAIN_ID --a-client $client_id --b-client 07-tendermint-0
          hermes create connection --a-chain ica-chain --b-chain $CHAIN_ID
          echo "ica-chain connection-0 info:"
          hermes --json query connection end --chain ica-chain --connection connection-0 | tail -n 1 | jq '.result.counterparty'
          echo "Starting Hermes"
          screen -L -Logfile $HOME/artifact/hermes.service.log -S hermes.service -d -m bash $HOME/hermes.service.sh
          # set screen to flush log to 0
          screen -r hermes.service -p0 -X logfile flush 0
          echo "Wait for hermes to start..."
          ( tail -f -n0 $HOME/artifact/hermes.service.log & ) | grep -q "Hermes has started"
          sleep 60
      - name: Test ICA
        env:
          ICA_HOME: /home/runner/.ica-chain
          CHAIN_HOME: /home/runner/.val1
        run: |
          tests/stateful/test_ica_controller.sh 
      - name: Initialize consumer chain a with Interchain Security (Consumer) PSS
        env:
          CONSUMER_CHAIN_ID: consumera
          DOWNTIME_BLOCKS: 20
          CONSUMER_NEW: true
          CONSUMER_CHAIN_BINARY: ${{ vars.CONSUMER_CHAIN_BINARY_2 }}
        run: scripts/stateful/init_consumer.sh
      - name: Launch consumer chain a
        env:
          CONSUMER_CHAIN_ID: consumera
          CONSUMER_CHAIN_BINARY: ${{ vars.CONSUMER_CHAIN_BINARY_2 }}
          PSS_ENABLED: true
          TOPN: 100
        run: scripts/stateful/launch_consumer.sh v4.x
      - name: _Consumer chain produces blocks> ICS v4.0.0
        run: tests/test_block_production.sh 127.0.0.1 $CON1_RPC_PORT 10
      - name: Establish CCV channel for consumer a
        run: |
          killall hermes || true
          screen -XS hermes.service quit || true
          client_id=$(gaiad --home $HOME/.val1 q provider list-consumer-chains --output json | jq -r '.chains[] | select(.chain_id=="consumera").client_id')
          hermes create connection --a-chain consumera --a-client 07-tendermint-0 --b-client $client_id
          hermes create channel --a-chain consumera --a-port consumer --b-port provider --order ordered --a-connection connection-0 --channel-version 1
          echo "Starting Hermes"
          screen -L -Logfile $HOME/artifact/hermes.service.log -S hermes.service -d -m bash $HOME/hermes.service.sh
          # set screen to flush log to 0
          screen -r hermes.service -p0 -X logfile flush 0
          echo "Wait for hermes to start..."
          ( tail -f -n0 $HOME/artifact/hermes.service.log & ) | grep -q "Hermes has started"
          sleep 60
      - name: _VSC successful> Interchain Security (Consumer) PSS
        run: tests/stateful/test_ccv.sh
      - name: _IBC transfer successful> Interchain Security (Consumer) PSS
        env:
          CONSUMER_CHAIN_ID: consumera
        run: |
          set -x
          client_id=$(gaiad --home $HOME/.val1 q provider list-consumer-chains --output json | jq -r '.chains[] | select(.chain_id=="consumera").client_id')
          echo "Client ID: $client_id"
          connection_id=$(hermes --json query client connections --chain $CHAIN_ID --client $client_id | jq -r '. | select(.result).result[]')
          echo "Connection ID: $connection_id"
          channel_id=$(hermes --json query connection channels --chain $CHAIN_ID --connection $connection_id | jq -r '. | select(.result).result[] | select(.port_id=="transfer").channel_id')
          echo "Channel ID: $channel_id"
          tests/stateful/test_consumer_ibc_transfer.sh $channel_id 2 $WALLET_1 $WALLET_CONSUMER_1
          echo "CONSUMERA_CHAN_ID=$channel_id" >> $GITHUB_ENV
      - name: Set BlocksPerEpoch to 100
        run: scripts/stateful/set_epoch.sh templates/proposal-blocks-per-epoch-100.json
      - name: Check BlocksPerEpoch is 100
        run: |
          BPE=$($CHAIN_BINARY --home $HOME_1 q params subspace provider BlocksPerEpoch -o json | jq -r '.param.value')
          echo "BlocksPerEpoch is: $BPE"
          if [ $BPE != "\"100\"" ]
          then
            echo "BlocksPerEpoch is not 100"
            exit 1
          fi
      - name: Waiting for 100th block
        run: |
          cur_height=0
          to_height=$(curl 127.0.0.1:$VAL1_RPC_PORT/block | jq -r '.result.block.header.height' | sed 's|.*|(&+50)/100*100|' | bc)
          until [[ "${cur_height}" -gt "${to_height}" ]]
          do
              cur_height=$(curl -s http://127.0.0.1:$VAL1_RPC_PORT/block | jq -r .result.block.header.height)
              sleep 1
          done
      - name: _VSC successful epoch> ICS cona1
        # env:
        #   CON1_RPC_PORT: 27201
        run: tests/stateful/test_ccv_epoch.sh 100
      - name: Test expedited proposal
        run: |
          export EXPEDITED_PERIOD=$($CHAIN_BINARY --home $HOME_1 q gov params -o json | jq -r '.params.expedited_voting_period')
          echo "EXPEDITED_PERIOD set to: $EXPEDITED_PERIOD"
          tests/stateful/gaia-v18/test_expedited_proposal.sh
      - name: Print block params
        run: |
          params=$(http://127.0.0.1:$VAL1_API_PORT/cosmos/consensus/v1/params | jq -r '.params.block.max_bytes')
          echo "$params"
      - name: Set consensus timeout to 1 minute
        run: |
          source ~/env/bin/activate
          toml set --toml-path $HOME_1/config/config.toml consensus.timeout_commit "60s"
          screen -S $PROVIDER_SERVICE_1 -p 0 -X stuff "^C"
      - name: Wait for 2 blocks
        run: tests/test_block_production.sh 127.0.0.1 $VAL1_RPC_PORT 2 300
      - name: _Test Feemarket
        run: |
          export ACCOUNT_NUMBER=$($CHAIN_BINARY --home $HOME_1 q account $WALLET_2 -o json | jq -r '.account_number')
          echo "Account number for $WALLET_2 is: $ACCOUNT_NUMBER"
          tests/stateful/gaia-v18/test_feemarket.sh
      # - name: DEBUG
      #   run: |
      #     while [ ! -f /continue ]
      #     do
      #       sleep 1
      #     done
      - name: Stop services
        if: always()
        run: |
          # hermes
          killall hermes || true
          screen -XS hermes.service quit || true
          # provider
          killall ${{ env.CHAIN_BINARY }}  || true
          screen -XS {{ env.PROVIDER_SERVICE_1 }} quit || true
          # consumer chains
          killall ${{ env.CONSUMER_CHAIN_BINARY }} || true
          killall ${{ env.CONSUMER_CHAIN_BINARY_2 }} || true
          screen -XS ${{ env.CONSUMER_SERVICE_1 }} quit || true
          screen -XS conb1.service quit || true
          # stride
          killall ${{ env.STRIDE_CHAIN_BINARY }}  || true
          screen -XS ${{ env.STRIDE_SERVICE_1 }} quit || true
          sleep 20
      - name: Generate info graphs
        if: always()
        run: |
          source ~/env/bin/activate
          # Main gaia service
          graph $HOME/artifact/mem-$PROVIDER_SERVICE_1.csv -o $HOME/artifact/mem-$PROVIDER_SERVICE_1.png --fill --time-format-input epoch --time-format-output %H:%M:%S --fontsize 8 --title "Gaiad RAM Usages" --ylabel "Memory Used (MB)" --xlabel Time --figsize 1920x1080
      - name: Save config files
        if: always()
        run: |
          mkdir ~/artifact/configs
          rm ${{ vars.HOME_1 }}/config/genesis.json || true
          cp -rp ${{ vars.HOME_1 }}/config/ ~/artifact/configs/val1 || true
          cp -rp ~/.hermes/ ~/artifact/configs/hermes/ || true
          cp -rp ~/.cona1/config/ ~/artifact/configs/cona1 || true
          cp -rp ~/.conb1/config/ ~/artifact/configs/conb1 || true
          cp -rp ~/.stride1/config/ ~/artifact/configs/stride1 || true
          mkdir ~/artifact/bin
          cp -p ~/go/bin/* ~/artifact/bin/ || true
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: archived-upgrade-${{ vars.CHAIN_ID }}-${{ inputs.gaia_version }}-${{ inputs.upgrade_version }}
          path: ~/artifact/
